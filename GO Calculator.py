# -*- coding: utf-8 -*-
#using pysimpleGUI
#Galaxy Online Battle Calculator by @fadedness (telegram)
#version 1.03

import PySimpleGUI as sg
import os.path
import random
import datetime
import math

#---------------------------        Icons        --------------------------------------
#--------------------------------------------------------------------------------------

def _galaxy_icon():
    galaxy_icon = b''
    return galaxy_icon

def _img_donut():
    img_donut = b''
    return img_donut

galaxy_icon = _galaxy_icon()
img_donut = _img_donut()

#--------------------------------------------------------------------------------------
# Classes are not used, left for visual reference only

class Ship(object):
    def __init__(self, name, ship_id, damage_type_id, attack, defense, weight_in_question, priority_att, priority_def, speed, price, defense_laser, defense_kinetic, defense_plasma, defense_rocket, defense_rail, build_time = 0):
        self.name = name                                        #    0
        self.ship_id = ship_id                                  #    1
        self.damage_type_id = damage_type_id                    #    2
        self.attack = attack                                    #    3
        self.defense = defense                                  #    4
        self.weight_in_question = weight_in_question            #    5
        self.priority_att = priority_att                        #    6
        self.priority_def = priority_def                        #    7
        self.speed = speed                                      #    8
        self.price = price                                      #    9
        self.defense_laser = defense_laser                      #   10
        self.defense_kinetic = defense_kinetic                  #   11
        self.defense_plasma = defense_plasma                    #   12
        self.defense_rocket = defense_rocket                    #   13
        self.defense_rail = defense_rail                        #   14
        self.build_time = build_time                            #   15

#--------------------------------------------------------------------------------------
# old Beta
"""
default_ship_list = [
    ['Джавелин', 0, 2, 25, 30, 2, 1000, 3000, 8, 250, 18, 24, 30, 36, 42, 273],
    ['Хорнет', 1, 0, 70, 70, 6, 1000, 3000, 7, 450, 70, 42, 98, 56, 84, 780],
    ['Раптор', 2, 1, 100, 90, 8, 1000, 3000, 6, 550, 126, 90, 108, 54, 72, 429],
    ['Экскалибр', 3, 3, 150, 150, 12, 1000, 3000, 5, 750, 180, 210, 120, 150, 90, 683],
    ['Аббадон', 4, 4, 450, 500, 35, 1000, 3000, 4, 2000, 400, 600, 300, 700, 500, 0],
    ['Локи', 5, 1, 10, 10, 1, 250, 100, 10, 80, 12, 10, 11, 8, 9, 488],
    ['Геркулес', 6, 0, 10, 200, 10, 250, 250, 5, 200, 200, 160, 240, 180, 220, 585],
    ['Валькирия', 7, 3, 50, 100, 10, 5000, 250, 3, 2500, 110, 120, 90, 100, 80, 1560],
    ['Титан', 8, 4, 500, 10000, 100, 100, 100, 3, 15000, 9000, 11000, 8000, 12000, 10000, 3510]
]
"""
# released stats
default_ship_list = [
    ['Джавелин', 0, 2, 45, 55, 2, 1000, 3000, 8, 500, 33, 44, 55, 66, 77, 264],
    ['Хорнет', 1, 0, 110, 90, 4, 1000, 3000, 7, 1000, 90, 54, 126, 72, 108, 528],
    ['Раптор', 2, 1, 150, 150, 6, 1000, 3000, 6, 1500, 210, 150, 180, 90, 120, 720],
    ['Экскалибр', 3, 3, 225, 275, 10, 1000, 3000, 5, 2750, 330, 385, 220, 275, 165, 1200],
    ['Аббадон', 4, 4, 440, 360, 16, 1000, 3000, 4, 4400, 288, 432, 216, 504, 360, 1920],
    ['Локи', 5, 1, 20, 20, 1, 250, 100, 10, 400, 24, 20, 22, 16, 18, 120],
    ['Геркулес', 6, 0, 25, 275, 10, 250, 250, 5, 400, 275, 220, 330, 248, 303, 300],
    ['Валькирия', 7, 3, 50, 100, 8, 5000, 250, 3, 5000, 110, 120, 90, 100, 80, 2400],
    ['Титан', 8, 4, 200, 900, 100, 100, 100, 3, 32000, 810, 990, 720, 1080, 900, 5400]
]

default_damage_names_id = [
    'Лазер',                        #   id  #   0
    'Кинетика',                     #   id  #   1
    'Плазма',                       #   id  #   2
    'Ракеты',                       #   id  #   3
    'Рельса'                        #   id  #   4
]

default_ships_names = [
    'Джавелин',                     #   id  #   0
    'Хорнет',                       #   id  #   1
    'Раптор',                       #   id  #   2
    'Экскалибр',                    #   id  #   3
    'Аббадон',                      #   id  #   4
    'Локи',                         #   id  #   5
    'Геркулес',                     #   id  #   6
    'Валькирия',                    #   id  #   7
    'Титан'                         #   id  #   8
]

default_planetary_coefs = [
    ['T0', 0, 0, 0.00, 0.00, 0.00],
    ['T1', 0, 0, 0.80, 1.00, 1.20],
    ['T2', 0, 0, 1.00, 1.25, 1.50],
    ['T3', 0, 0, 1.20, 1.50, 1.80],
    ['T4', 0, 0, 1.40, 1.75, 2.10],
    ['T5', 0, 0, 1.60, 2.00, 2.40],
    ['T6', 0, 0, 2.00, 2.50, 3.00],
    ['T7', 0, 0, 2.40, 3.00, 3.60]
]

default_planet_names = [
    'T1 Ториум',
    'T2 Ванадиум',
    'T3 Отариум',
    'T4 Хромиум',
    'T5 Кладиум',
    'T6 Неодиум',
    'T7 Минтериум'
]

default_mines_quantity = [
    '3 шахты',
    '4 шахты',
    '5 шахт'
]

# Название, прочность за уровень
default_buildings_defense_list = [
    ['Командный центр', 700],
    ['Шахта', 500],
    ['Склад', 250],
    ['Торговый центр', 400],
    ['Космопорт', 450],
    ['Завод космолётов', 550],
    ['Энергостанция', 300],
    ['Станция обнаружения', 350],
    ['Ракетная башня', 650],
    ['Генератор щита', 750]
]

# Название, кол-во боеголовок, урон от боеголовки, цена, время постройки, id цели
default_missiles_list = [
    ['Sticks-XL', 1, 50, 100, 22, 3, 1],
    ['Кобра-М1', 1, 150, 250, 45, 3, 0],
    ['Аврора', 4, 75, 600, 90, 3, 2],
    ['X-Ray', 1, 100, 3000, 150, 3, 3]
]
# Цели атаки ракет:                             id
# Кобра-М1      при атаке и захвате планеты     0
# Sticks-XL     при блокаде планеты             1
# X-Ray         против Валькирий                3
# Аврора        всегда                          2

# Пассивный урон у ракетных турелей - рельсовый, у ракет - ракетный, от взрыва генератора щита - лазерный

thold_per = 0.125
thold_max = 1.5
thold_max_bonus = 50
threshhold = 0.5
global_defaults = [0.125, 50]
logs = []

#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------
#             Секция вспомогательных функций
#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------

def _log(text):
    text += "\n"
    logs.append(text)

def _savelog():
    logfile = "log" + str(random.randrange(1000, 10000)) + ".txt"
    with open(logfile, "w") as f:
        for line in logs:
            f.write(line)
    f.close()

def _load_ships_from_file():
    ships = []
    ships_str = []
    ships_str_2 = []
    ships_names = default_ships_names
    #['Джавелин', 'Хорнет', 'Раптор', 'Экскалибр', 'Аббадон', 'Локи', 'Геркулес', 'Валькирия', 'Титан']
    filename = "ships.txt"
    if os.path.isfile(filename):
        with open(filename, "r") as f:
            lines = f.readlines()
        f.close()
        text = "_load_ships_from_file: file read"
        _log(text)
        print(text)
        
        try:
            if len(lines) != 9:
                raise ValueError
        except ValueError:
            title = 'Ошибка загрузки файла кораблей'
            text = 'Возникла ошибка при загрузке параметров кораблей из файла.\nВозможно файл был изменён некорректным образом.\nБудут использованы значения по умолчанию.'
            _error_popup_value_error(title, text)
            _save_ships_to_file(default_ship_list)
            return default_ship_list
        
        i = 0
        for line in lines:
            ships_str.append(ships_names[i] + ' ' + str(i) + ' ' + line.strip())
            i += 1
        
        i = 0
        for line in ships_str:
            ships_str_2.append([])
            value = ''
            for j in range(len(line)):
                if line[j] != ' ':
                    value += line[j]
                else:
                    ships_str_2[i].append(value)
                    value = ''
                    j += 1
            i += 1
        
        for j in range(len(ships_str_2)):
            ships.append([ships_str_2[j][0]])
            for i in range(1, len(ships_str_2[j])):
                try:
                    ships[j].append(int(ships_str_2[j][i]))
                except:
                    title = 'Ошибка загрузки файла кораблей'
                    text = 'Возникла ошибка при загрузке параметров кораблей из файла.\nВозможно файл был изменён некорректным образом.\nБудут использованы значения по умолчанию.'
                    _error_popup_value_error(title, text)
                    _save_ships_to_file(default_ship_list)
                    return default_ship_list
        
        try:
            if len(ships) != 9:
                raise ValueError
            for j in range(len(ships)):
                if len(ships[j]) != 16:
                    raise ValueError
        except ValueError:
            title = 'Ошибка загрузки файла кораблей'
            text = 'Возникла ошибка при загрузке параметров кораблей из файла.\nВозможно файл был изменён некорректным образом.\nБудут использованы значения по умолчанию.'
            _error_popup_value_error(title, text)
            _save_ships_to_file(default_ship_list)
            return default_ship_list
        
        for j in range(len(ships)):
            for i in [3, 4, 6, 7, 10, 11, 12, 13, 14]:
                try:
                    if ships[j][i] == 0:
                        raise ValueError
                except ValueError:
                    title = 'Ошибка загрузки файла кораблей'
                    text = 'Возникла ошибка при загрузке параметров кораблей из файла.\nБыл обнаружен ноль в параметре Атаки//Защиты//Приоритета,\nчто приведёт к делению на ноль.\nБудут использованы значения по умолчанию.'
                    _error_popup_value_error(title, text)
                    _save_ships_to_file(default_ship_list)
                    return default_ship_list
        
    else:
        try:
            text = "_load_ships_from_file: file not found"
            _log(text)
            print(text)
            raise ValueError
        except ValueError:
            title = 'Ошибка загрузки файла кораблей'
            text = 'Файл ships.txt не найден.\nБудут использованы значения по умолчанию.\nНовый файл будет создан с этими значениями.'
            _error_popup_value_error(title, text)
            _save_ships_to_file(default_ship_list)
            return default_ship_list
        
    #text = "Loaded ships from file:\n%s" % (ships)
    #_log(text)
    #print(text)
    return ships

def _save_ships_to_file(ships):
    lines = []
    filename = "ships.txt"
    with open(filename, "w") as f:
        for j in range(9):
            line = ''
            for i in range(2, 16):
                line += str(ships[j][i]) + ' '
            line += '0\n'
            lines.append(line)
        for line in lines:
            f.write(line)
    f.close()
    text = "ships data saved to file:\n%s" % (ships)
    _log(text)
    print(text)

def _check_ships_before_saving(ships):
    try:
        if len(ships) != 9:
            raise ValueError
        for j in range(len(ships)):
            if len(ships[j]) != 16:
                raise ValueError
            for i in [3, 4, 6, 7, 10, 11, 12, 13, 14]:
                if ships[j][i] == 0:
                    raise ValueError
    except ValueError:
        title = 'Ошибка сохранения параметров'
        text = 'Возникла ошибка при сохранении параметров кораблей.\nВозможно был обнаружен ноль в параметре Атаки//Защиты//Приоритета,\nчто приведёт к делению на ноль в дальнейшем.\nИсправьте значения.'
        _error_popup_value_error(title, text)
        return False
    return True

def _check_is_a_positive_number(values_list, to_check):
    for elem in to_check:
        try:
            a = int(values_list[elem])
            if a < 0:
                raise ValueError
        except ValueError:
            title = 'Ошибка ввода'
            text = 'Некорректный ввод, допустимы только целые положительные числа'
            _error_popup_value_error(title, text)
            try:
                if str(values_list['t1c110']) == 'dev_savelog':
                    _savelog()
            except:
                pass
            return False
    return True

def _check_is_a_number(values_list, to_check):
    for elem in to_check:
        try:
            a = int(values_list[elem])
        except ValueError:
            title = 'Ошибка ввода'
            text = 'Некорректный ввод, допустимы только целые числа'
            _error_popup_value_error(title, text)
            return False
    return True

def _check_is_a_number_in_range(values_list, to_check, min_, max_):
    for elem in to_check:
        try:
            a = int(values_list[elem])
            if a < min_ or a > max_:
                raise ValueError
        except ValueError:
            title = 'Ошибка ввода'
            text = 'Некорректное значение меткости, допустимы числа в диапазоне от %s до %s. Будет использовано 100%%.' % (min_, max_)
            _error_popup_value_error(title, text)
            return False
    return True

def _check_is_a_positive_float(to_check):
    try:
        a = float(to_check)
        if a <= 0:
            raise ValueError
    except ValueError:
        title = 'Ошибка ввода'
        text = 'Некорректное значение коэф. преимущества. Введите положительное дробное или целое число.'
        _error_popup_value_error(title, text)
        return False
    return True

def _check_is_a_positive_number_global(to_check):
    try:
        a = int(to_check)
        if a < 0:
            raise ValueError
    except ValueError:
        title = 'Ошибка ввода'
        text = 'Некорректное значение макс бонуса преимущества. Введите положительное целое число.'
        _error_popup_value_error(title, text)
        return False
    return True

def _check_all_buildings(all_buildings):
    title = 'Ошибка ввода'
    text = 'Уровень зданий превышает возможный уровень зданий в игре. Пожалуйста, измените значения.'
    all_levels = 0
    for building in all_buildings:
        all_levels += building
    try:
        if all_buildings[0] > 30:
            raise ValueError
        elif all_buildings[1] > 150:
            raise ValueError
        elif all_buildings[2] > 630:
            raise ValueError
        elif all_buildings[3] > 30:
            raise ValueError
        elif all_buildings[4] > 270:
            raise ValueError
        elif all_buildings[5] > 150:
            raise ValueError
        elif all_buildings[6] > 30:
            raise ValueError
        elif all_buildings[7] > 30:
            raise ValueError
        elif all_buildings[8] > 720:    #600:
            raise ValueError
        elif all_buildings[9] > 30:
            raise ValueError
        elif all_levels > 750:
            raise ValueError
        return True
    except ValueError:
        _error_popup_value_error(title, text)
        return False

def _translate_id_to_name(ids):
    names =['Джавелин', 'Хорнет', 'Раптор', 'Экскалибр', 'Аббадон']
    result = []
    for j in range(5):
        for i in range(5):
            if ids[j] == i:
                result.append(names[i])
                break
    return result

def _load_default_options_ships(window):
    damage_names = ['Лазер', 'Кинетика', 'Плазма', 'Ракеты', 'Рельса']
    for j in range(9):
        damage_type_default = damage_names[default_ship_list[j][2]]
        window['ship_' + str(j) + '2'].update(value = damage_type_default)
        for i in range(3, 16):
            window['ship_' + str(j) + str(i)].update(value = default_ship_list[j][i])

def _load_default_options_globals(window):
    window['globals_0'].update(value = global_defaults[0])
    window['globals_1'].update(value = global_defaults[1])

def _load_globals_from_file():
    filename = "globals.txt"
    if os.path.isfile(filename):
        with open(filename, "r") as f:
            lines = f.readlines()
        f.close()
        text = "_load_globals_from_file: file read"
        _log(text)
        print(text)
        
        try:
            if len(lines) != 2:
                raise ValueError
        except ValueError:
            title = 'Ошибка загрузки файла'
            text = 'Возникла ошибка при загрузке пользовательских глобальных переменных из файла.\nВозможно файл был изменён некорректным образом.\nБудут использованы значения по умолчанию.'
            _error_popup_value_error(title, text)
            _save_globals_to_file(global_defaults)
            return global_defaults
    else:
        try:
            text = "_load_ships_from_file: file not found"
            _log(text)
            print(text)
            raise ValueError
        except ValueError:
            title = 'Ошибка загрузки файла'
            text = 'Возникла ошибка при загрузке пользовательских глобальных переменных из файла.\nВозможно файл был изменён некорректным образом.\nБудут использованы значения по умолчанию.'
            _error_popup_value_error(title, text)
            _save_globals_to_file(global_defaults)
            return global_defaults
    file_globals = []
    for line in lines:
        file_globals.append(line.strip())
    try:
        a = float(file_globals[0])
        b = int(file_globals[1])
        if a <= 0 or b < 0:
            raise ValueError
    except ValueError:
        title = 'Ошибка загрузки файла'
        text = 'Возникла ошибка при загрузке пользовательских глобальных переменных из файла.\nВозможно файл был изменён некорректным образом.\nБудут использованы значения по умолчанию.'
        _error_popup_value_error(title, text)
        _save_globals_to_file(global_defaults)
        return global_defaults
            
    return file_globals

def _save_globals_to_file(globals_list):
    filename = "globals.txt"
    with open(filename, "w") as f:
        for line in globals_list:
            f.write(str(line) + '\n')
    f.close()
    text = "globals data saved to file:\n%s" % (globals_list)
    _log(text)
    print(text)

def _separator_for_output(number):
    number_str = str(number)
    digits = len(number_str)
    if digits <= 3:
        return number_str
    else:
        div = digits // 3
        div_mod = digits % 3
        separ_count = div
        position = div_mod
        if div_mod == 0:
            separ_count -= 1
            str_num = number_str[0:3]
            position += 3
        else:
            str_num = number_str[0:div_mod]
        for i in range(separ_count):
            str_num += ' ' + number_str[position:position+3]
            position += 3
    return str_num

#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------
#             Секция интерфейса (GUI)
#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------

def _error_popup_value_error(title, text):
    layout = [[sg.Text(text)]]
    layout += [[sg.Button('Закрыть')]]
    window = sg.Window(title, layout, modal = True, auto_size_text = True, icon = galaxy_icon) #keep_on_top = True
    _log(title)
    _log(text)
    print(title, "\n", text)
    while True:
        event, values = window.read()
        if event in ('Закрыть', sg.WIN_CLOSED):
            break
    window.close()

def _my_popup_about():
    title = 'О программе'
    text = 'version 1.03\n\nНаписано на Python3 с использованием библиотеки PySimpleGUI\nСкомпилировано для Windows с помощью PySimpleGUI-exemaker\n\n@fadedness - мой телеграм\n\nПринимаю Ваш фидбек: отзывы, предложения, баги и ошибки.\n\nЕсли Вам понравилась программа и Вы хотите меня отблагодарить, то можете сделать это следующими способами:\n'
    text += 'Minter Mxe548ae76175bec07bca65010da7c7999db585cd2\n' + 'Long Coin 16eBZWG99zT3JJEnT7Vk4UX2U1nByey8bo\n' + 'Near validol.near'
    text += '\nТакже Вы можете использовать мой реферальный код в самой игре - 50981714'
    layout = [[sg.Multiline(default_text = text, disabled = True, size = (45, 22))], [sg.Image(data = img_donut)]]#, [sg.Button('Закрыть')]]
    window = sg.Window(title, layout, modal = True, size = (400, 600), icon = galaxy_icon)
    while True:
        event, values = window.read()
        if event in ('Закрыть', sg.WIN_CLOSED):
            break
    window.close()

def _my_popup_description():
    title = 'Описание возможностей'
    text = 'Программа производит расчёты по будущей механике, которая сейчас тестируется на ЗБТ.\n\nВозможности программы:\n\n- рассчитывает результат боя указанных флотов\n\n- находит примерное минимальное количество кораблей, необходимых для полного\nуничтожения цели в худшем случае рандома указанной меткости: мимо гарантированно\nуйдёт (100 - меткость) % урона. Например, меткость 80%: 20% урона не попало.\nНо после этого остальные расчёты используют 100% меткость, показывая Ваши\nмаксимально возможные потери.\n\n- находит количество кораблей, дающее максимальный бонус к защите (+50%) от\nпревосходства флота, что минимизирует потери.\n\n- кроме количества уничтоженных кораблей показывает стоимость кораблей в энергии,\nвремя, потраченное для строительства уничтоженных кораблей в секундах и\nсуммарный лишний урон, если есть.\n\n- в верхнем меню в настройках можно менять характеристики кораблей и глобальных\nпараметров (пока два).\n\n- кроме модулей, есть возможность указать модификаторы урона и защиты от урона, которые\nбудут давать командоры (механика ещё не реализована на ЗБТ), в том числе для\nэксперимента можно указать отрицательные модификаторы.'
    layout = [[sg.Text(text)]]#, [sg.Button('Продолжить')]]
    window = sg.Window(title, layout, modal = True, size = (600, 450), icon = galaxy_icon)#auto_size_text = True)
    while True:
        event, values = window.read()
        if event in ('Продолжить', sg.WIN_CLOSED):
            break
    window.close()

def _my_popup_description_first():
    title = 'Описание возможностей'
    text = 'Программа производит расчёты по будущей механике, которая сейчас тестируется на ЗБТ.\n\nВозможности программы:\n\n- рассчитывает результат боя указанных флотов\n\n- находит примерное минимальное количество кораблей, необходимых для полного\nуничтожения цели в худшем случае рандома указанной меткости: мимо гарантированно\nуйдёт (100 - меткость) % урона. Например, меткость 80%: 20% урона не попало.\nНо после этого остальные расчёты используют 100% меткость, показывая Ваши\nмаксимально возможные потери.\n\n- находит количество кораблей, дающее максимальный бонус к защите (+50%) от\nпревосходства флота, что минимизирует потери.\n\n- кроме количества уничтоженных кораблей показывает стоимость кораблей в энергии,\nвремя, потраченное для строительства уничтоженных кораблей в секундах и\nсуммарный лишний урон, если есть.\n\n- в верхнем меню в настройках можно менять характеристики кораблей и глобальных\nпараметров (пока два).\n\n- кроме модулей, есть возможность указать модификаторы урона и защиты от урона, которые\nбудут давать командоры (механика ещё не реализована на ЗБТ), в том числе для\nэксперимента можно указать отрицательные модификаторы.\n\n Это описание можно найти в верхнем меню Help - Description.'
    layout = [[sg.Text(text)], [sg.Button('Продолжить')]]
    window = sg.Window(title, layout, modal = True, size = (600, 500), icon = galaxy_icon)#auto_size_text = True)
    while True:
        event, values = window.read()
        if event in ('Продолжить', sg.WIN_CLOSED):
            break
    window.close()

def _global_settings_popup():
    global thold_per
    global thold_max
    global thold_max_bonus
    row_1 = [[sg.Input(default_text = 'Коэф. преимущества', size = (24, 1), readonly = True, enable_events = False, justification = 'left'), sg.Input(default_text = str(thold_per), size = (10, 1), enable_events = False, justification = 'right', key = 'globals_0')]]
    row_2 = [[sg.Input(default_text = 'Макс бонус преимущества', size = (24, 1), readonly = True, enable_events = False, justification = 'left'), sg.Input(default_text = str(thold_max_bonus), size = (10, 1), enable_events = False, justification = 'right', key = 'globals_1')]]
    row_3 = [[sg.Input(default_text = 'Пусто', size = (24, 1), readonly = True, enable_events = False, justification = 'left'), sg.Input(default_text = '0', size = (10, 1), readonly = True, enable_events = False, justification = 'right', key = 'globals_2')]]
    row_4 = [[sg.Input(default_text = 'Пусто', size = (24, 1), readonly = True, enable_events = False, justification = 'left'), sg.Input(default_text = '0', size = (10, 1), readonly = True, enable_events = False, justification = 'right', key = 'globals_3')]]
    row_5 = [[sg.Input(default_text = 'Пусто', size = (24, 1), readonly = True, enable_events = False, justification = 'left'), sg.Input(default_text = '0', size = (10, 1), readonly = True, enable_events = False, justification = 'right', key = 'globals_4')]]
    row_6 = [[sg.Input(default_text = 'Пусто', size = (24, 1), readonly = True, enable_events = False, justification = 'left'), sg.Input(default_text = '0', size = (10, 1), readonly = True, enable_events = False, justification = 'right', key = 'globals_5')]]
    row_9 = [[sg.Button('Сохранить и закрыть'), sg.Button('Закрыть без сохранения'), sg.Button('Сбросить на дефолтные')]]
    layout = row_1 + row_2 + row_3 + row_4 + row_5 + row_6 + row_9
    window = sg.Window('Глобальные параметры', layout, size = (500, 200), modal = True, resizable = True, icon = galaxy_icon)
    while True:
        event, values = window.read()
        if event == "Сохранить и закрыть":
            if _check_is_a_positive_float(values['globals_0']):
                thold_per = float(values['globals_0'])
                if _check_is_a_positive_number_global(values['globals_1']):
                    thold_max_bonus = int(values['globals_1'])
                    thold_max = float(1 + thold_max_bonus / 100)
                    _save_globals_to_file([thold_per, thold_max_bonus])
                    break
        elif event in ('Закрыть без сохранения', sg.WIN_CLOSED):
            break
        elif event == 'Сбросить на дефолтные':
            _load_default_options_globals(window)
    window.close()

def _options_popup():
    options_header_1 = ['Название', 'Идентификатор', 'Тип урона', 'Атака', 'Защита', 'Вес', 'Приоритет в атаке', 'Приоритет в защите', 'Скорость', 'Цена', 'Защита от лазера', 'Защита от кинетики', 'Защита от плазмы', 'Защита от ракет', 'Защита от рельсы', 'Время строительства']
    options_ship_names = default_ships_names
    options_damage_names = default_damage_names_id
    ships = listofships
    #['Джавелин', 'Хорнет', 'Раптор', 'Экскалибр', 'Аббадон', 'Локи', 'Геркулес', 'Валькирия', 'Титан']
    ship_rows = [[[sg.Text(options_ship_names[j])]] + [[sg.Input(default_text = options_header_1[i], size = (20, 1), readonly = True, enable_events = False), sg.Input(default_text = str(ships[j][i]), size = (10, 1), key = 'ship_' + str(j) + str(i), justification = 'right')]  for i in range(2, 16)] for j in range(9)]
    
    to_check_ids_options = ['ship_' + str(j) + str(i) for j in range(9) for i in range(3, 16)]
    text = "to_check_ids_options list:\n%s" % (to_check_ids_options)
    _log(text)
    print(text)
    
    for j in range(9):
        damage_name = options_damage_names[listofships[j][2]]
        ship_rows[j][1][1] = sg.Combo(options_damage_names, readonly = True, key = 'ship_' + str(j) + '2', default_value = damage_name)
    
    ship_columns = []
    for row in ship_rows:
        ship_columns.append(sg.Column(row))
    ship_main_column = sg.Column([ship_columns], scrollable = True, expand_y = True)
    layout = [[ship_main_column]] + [[sg.Button('Сохранить и закрыть'), sg.Button('Закрыть без сохранения'), sg.Button('Сбросить на дефолтные')]]
    window = sg.Window('Параметры кораблей', layout, size = (1100, 500), modal = True, resizable = True, icon = galaxy_icon)
    while True:
        event, values = window.read()
        if event == "Сохранить и закрыть":
            if _check_is_a_positive_number(values, to_check_ids_options):
                for j in range(9):
                    damage_name = values['ship_' + str(j) + '2']
                    for i in range(5):
                        if damage_name == options_damage_names[i]:
                            d_id = i
                            break
                    ships[j][2] = d_id
                    for i in range(3, 16):
                        ships[j][i] = int(values['ship_' + str(j) + str(i)])
                if _check_ships_before_saving(ships):
                    _save_ships_to_file(ships)
                    for j in range(9):
                        for i in range(16):
                            listofships[j][i] = ships[j][i]
                    break
        elif event in ('Закрыть без сохранения', sg.WIN_CLOSED):
            break
        elif event == 'Сбросить на дефолтные':
            _load_default_options_ships(window)
    window.close()

def _tab1_layout():
    headings_1 = ['Корабль', 'Количество']
    headings_2 = ['Корабль', 'Выжило', 'Потеряно', 'Прочее']
    headings_ship_names = ['Джавелин', 'Хорнет', 'Раптор', 'Экскалибр', 'Аббадон', 'Локи', 'Геркулес', 'Валькирия', 'Титан']
    headings_type_damage = ['Лазер', 'Кинетика', 'Плазма', 'Ракеты', 'Рельса']
    headings_type_defense = ['от лазера', 'от кинетики', 'от плазмы', 'от ракет', 'от рельсы']
    headings_type_turrets = ['Сумма уровней турелей'] + [default_missiles_list[i][0] for i in range(0, 4)]
    
    t1c1_header =  [[sg.Text(' '*14)] + [sg.Text('Флот 1')]]
    t1c2_header =  [[sg.Text(' '*14)] + [sg.Text('Флот 2')]]
    t1c1_att = [[sg.Text('Флот в атаке?')]]
    t1c2_att = [[sg.Text('Флот в атаке?')]]
    t1c1_att_drop = [[sg.Combo(['В атаке', 'В защите'], readonly = True, key = 't1c1_att', default_value = 'В атаке')]]
    t1c2_att_drop = [[sg.Combo(['В атаке', 'В защите'], readonly = True, key = 't1c2_att', default_value = 'В защите')]]
    t1c3_header_1 = [[sg.Text(' '*45)] + [sg.Text('Флот 1')]]
    t1c3_header_2 = [[sg.Text(' '*45)] + [sg.Text('Флот 2')]]
    t1c4_header_1 = [[sg.Text(' '*0)] + [sg.Text('Модификаторы атаки, защиты (модуль),\nтипа урона и защиты от типа урона\n(Командоры).\nУказывать в процентах, например, 25')]]
    t1c4_header_2 = [[sg.Text(' '*0)] + [sg.Text('Модификаторы атаки, защиты (модуль),\nтипа урона и защиты от типа урона\n(Командоры).\nУказывать в процентах, например, 25')]] 
    t1c5_header = [[sg.Text(' '*10)] + [sg.Text('Турели и ракеты (Флот 2)')]]
    
    t1c5_acc = [[sg.Text('Способ расчёта урона от меткости:\nРандом для каждого корабля\n(например, 80% - 100%)\nили фиксированный срез урона\nнапример, 80% от урона')], [sg.Input(default_text = 'Меткость', size = (11, 1), readonly = True, enable_events = False), sg.Input(default_text = '80', size = (7, 1), key = 't1_acc', justification = 'right')], [sg.Input(default_text = 'Способ', size = (11, 1), readonly = True, enable_events = False), sg.Combo(['Рандом', 'Фикс'], readonly = True, key = 't1_acc_type', default_value = 'Рандом')]]
    
    # keys кол-во кораблей Флот 1
    sub_column_1 = t1c1_att + [[sg.Text(headings_1[0])]] + [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_ship_names]
    sub_column_2 = t1c1_att_drop + [[sg.Text(headings_1[1])]] + [[sg.Input(default_text = '0', size = (12, 1), key = 't1c11' + str(i), justification = 'right')] for i in range(9)]

    # keys кол-во кораблей Флот 2
    sub_column_3 = t1c2_att + [[sg.Text(headings_1[0])]] + [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_ship_names]
    sub_column_4 = t1c2_att_drop + [[sg.Text(headings_1[1])]] + [[sg.Input(default_text = '0', size = (12, 1), key = 't1c12' + str(i), justification = 'right')] for i in range(9)]

    # keys потеряно кораблей Флот 1 и их стоимость
    sub_column_5 = [[sg.Text(headings_2[0])]] + [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_ship_names] + [[sg.Input(default_text = 'Время строит. всего флота', size = (12, 1), readonly = True, enable_events = False)]]
    sub_column_6_a = [[sg.Text(headings_2[1])]] + [[sg.Input(default_text = '0', size = (14, 1), key = 't1c51_' + str(i), readonly = True, justification = 'right')] for i in range(10)]
    sub_column_6 = [[sg.Text(headings_2[2])]] + [[sg.Input(default_text = '0', size = (14, 1), key = 't1c52_' + str(i), readonly = True, justification = 'right')] for i in range(9)] + [[sg.Input(default_text = 'Время строит. потерянного флота', size = (14, 1), readonly = True, enable_events = False)]]
    sub_column_7 = [[sg.Text(headings_2[3])]] + [[sg.Input(default_text = 'Стоимость', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't1c220', readonly = True, justification = 'right')], [sg.Input(default_text = 'Ст-ть Потерь', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't1c221', readonly = True, justification = 'right')], [sg.Input(default_text = 'С. с вылетом', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't1c222', readonly = True, justification = 'right')], [sg.Input(default_text = 'Урона ост.', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't1c223', readonly = True, justification = 'right')], [sg.Input(default_text = '', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't1c224', readonly = True, justification = 'right')]]
    #sub_column_7 = [[sg.Text(headings_2[2])]] + [[sg.Input(default_text = '0', size = (10, 1), key = 't1c22' + str(i), readonly = True, justification = 'right')] for i in range(9)]

    # keys потеряно кораблей Флот 2 и их стоимость
    sub_column_8 = [[sg.Text(headings_2[0])]] + [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_ship_names] + [[sg.Input(default_text = 'Время строит. всего флота', size = (12, 1), readonly = True, enable_events = False)]]
    sub_column_9_a = [[sg.Text(headings_2[1])]] + [[sg.Input(default_text = '0', size = (14, 1), key = 't1c61_' + str(i), readonly = True, justification = 'right')] for i in range(10)]
    sub_column_9 = [[sg.Text(headings_2[2])]] + [[sg.Input(default_text = '0', size = (14, 1), key = 't1c62_' + str(i), readonly = True, justification = 'right')] for i in range(9)] + [[sg.Input(default_text = 'Время строит. потеряного флота', size = (14, 1), readonly = True, enable_events = False)]]
    sub_column_10 = [[sg.Text(headings_2[3])]] + [[sg.Input(default_text = 'Стоимость', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't1c320', readonly = True, justification = 'right')], [sg.Input(default_text = 'Ст-ть Потерь', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't1c321', readonly = True, justification = 'right')], [sg.Input(default_text = 'С. с вылетом', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't1c322', readonly = True, justification = 'right')], [sg.Input(default_text = 'Урона ост.', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't1c323', readonly = True, justification = 'right')], [sg.Input(default_text = '.', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't1c324', readonly = True, justification = 'right')]]
    #sub_column_10 = [[sg.Text(headings_2[2])]] + [[sg.Input(default_text = '0', size = (10, 1), key = 't1c32' + str(i), readonly = True, justification = 'right')] for i in range(9)]

    #sub_column_11 = [[sg.Text('Атака +%\nнапример, 25')]] + [[sg.Input(default_text = h, size = (13, 1), readonly = True, enable_events = False) for h in headings_type_damage]] + [[sg.Input(default_text = h, size = (13, 1), readonly = True, enable_events = False) for h in headings_type_defense]] + [[sg.Input(default_text = '0', size = (13, 1), key = 't1c1m1', justification = 'right')]]

    sub_column_11 = [[sg.Input(default_text = 'Атака', size = (12, 1), readonly = True, enable_events = False)]] + [[sg.Input(default_text = 'Защита', size = (12, 1), readonly = True, enable_events = False)]] + [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_type_damage] + [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_type_defense]

    # keys Флот 1 модификаторы
    sub_column_12 = [[sg.Input(default_text = '0', size = (12, 1), key = 't1c1m' + str(i), justification = 'right')] for i in range(12)]

    sub_column_13 = [[sg.Input(default_text = 'Атака', size = (12, 1), readonly = True, enable_events = False)]] + [[sg.Input(default_text = 'Защита', size = (12, 1), readonly = True, enable_events = False)]] + [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_type_damage] + [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_type_defense]

    # keys Флот 2 модификаторы
    sub_column_14 = [[sg.Input(default_text = '0', size = (12, 1), key = 't1c1n' + str(i), justification = 'right')] for i in range(12)]
    
    # key Турели и ракеты
    sub_column_15 = [[sg.Input(default_text = 'Тип планеты', readonly = True, size = (21, 1)), sg.Combo(default_planet_names , readonly = True, key = 't1_planet_type', default_value = 'T1 Ториум')], [sg.Input(default_text = 'Кол-во шахт', readonly = True, size = (21, 1)), sg.Combo(default_mines_quantity , readonly = True, key = 't1_planet_mines', default_value = '3 шахты')]]
    sub_column_15 += [[sg.Input(default_text = headings_type_turrets[i], size = (21, 1), readonly = True), sg.Input(default_text = '0', size = (10, 1), justification = 'right', key = 't1c8_' + str(i))] for i in range(5)]
    sub_column_15 += [[sg.Input(default_text = 'ЗБТ: наносить ли пассивный урон, если есть ракеты?', size = (21, 1), readonly = True), sg.Combo(['Да', 'Нет'], readonly = True, key = 't1_do_passive', default_value = 'Нет')]]
    sub_column_15 += [[sg.Input(default_text = 'Ракеты по блокаде?', size = (21, 1), readonly = True), sg.Combo(['Да', 'Нет'], readonly = True, key = 't1_blockade', default_value = 'Нет')]]
    sub_column_15 += [[sg.Input(default_text = 'ЗБТ: приоритет блокады против ракет:', size = (21, 1), readonly = True), sg.Combo(['Атака', 'Защита'], readonly = True, key = 't1_blockade_priority', default_value = 'Защита')]]
    
    my_yseparator = [[sg.Text('|')] for i in range(29)]
    my_hseparator_1 = [[sg.Text('_'*150)]]
    my_hseparator_2 = [[sg.Text('_'*150)]]
    my_yseparator_col = sg.Column(my_yseparator)

    t1c1_rows_ship_input = [[sg.Column(sub_column_1), sg.Column(sub_column_2)]]
    t1c2_rows_ship_input = [[sg.Column(sub_column_3), sg.Column(sub_column_4)]]
    t1c3_rows_ship_output = [[sg.Column(sub_column_5), sg.Column(sub_column_6_a), sg.Column(sub_column_6), sg.Column(sub_column_7)]]
    t1c4_rows_ship_output = [[sg.Column(sub_column_8), sg.Column(sub_column_9_a), sg.Column(sub_column_9), sg.Column(sub_column_10)]]
    t1c5_row_module = [[sg.Column(sub_column_11), sg.Column(sub_column_12)]]
    t1c6_row_module = [[sg.Column(sub_column_13), sg.Column(sub_column_14)]]
    t1c7_row_turrets = [[sg.Column(sub_column_15)]]

    tab1_column_1 = t1c1_header + t1c1_rows_ship_input
    tab1_column_2 = t1c2_header + t1c2_rows_ship_input
    tab1_column_3 = t1c3_header_1 + t1c3_rows_ship_output
    tab1_column_4 = t1c3_header_2 + t1c4_rows_ship_output
    tab1_column_5 = t1c4_header_1 + t1c5_row_module
    tab1_column_6 = t1c4_header_2 + t1c6_row_module
    tab1_column_7 = t1c5_acc + [[sg.Button('Рассчитать потери')]]
    tab1_column_8 = t1c5_header + t1c7_row_turrets

    tab1_scrollable_column = my_hseparator_1 + [[sg.Column(tab1_column_1), sg.Column(tab1_column_5), sg.VSeperator(), sg.Column(tab1_column_2), sg.Column(tab1_column_6), sg.VSeperator(), sg.Column(tab1_column_8)]] + my_hseparator_2 + [[sg.Column(tab1_column_3), sg.VSeperator(), sg.Column(tab1_column_4), sg.VSeperator(), sg.Column(tab1_column_7)]]

    return [[my_yseparator_col, sg.Column(tab1_scrollable_column, scrollable = True, expand_x = True, expand_y = True)]]

def _tab2_layout():
    headings_1 = ['Корабль', 'Количество']
    headings_2 = ['Корабль', 'Выжило', 'Потеряно', 'Прочее']
    headings_ship_names = ['Джавелин', 'Хорнет', 'Раптор', 'Экскалибр', 'Аббадон', 'Локи', 'Геркулес', 'Валькирия', 'Титан']
    headings_type_damage = ['Лазер', 'Кинетика', 'Плазма', 'Ракеты', 'Рельса']
    headings_type_defense = ['от лазера', 'от кинетики', 'от плазмы', 'от ракет', 'от рельсы']
    headings_fleet_1 = ['Корабль', 'Количество', 'Стоимость', 'Время строит. всего флота', 'Выжило', 'Потеряно', 'Стоимость', 'С. с вылетом', 'Время строит. потерянного флота', 'Урона остал.'] # length 9
    headings_type_turrets = ['Сумма уровней турелей'] + [default_missiles_list[i][0] for i in range(1, 3)]
    
    t2c1_header = [[sg.Text(' '*0)] + [sg.Text('Модификаторы атаки, защиты (модуль),\nтипа урона и защиты от типа урона\n(Командоры).\nУказывать в процентах, например, 25')]]
    t2c2_header_1 =  [[sg.Text(' '*8)] + [sg.Text('Цель: Флот 2')]]
    t2c2_header_2 = [[sg.Text(' '*0)] + [sg.Text('Модификаторы атаки, защиты (модуль),\nтипа урона и защиты от типа урона\n(Командоры).\nУказывать в процентах, например, 25')]]
    t2c3_header = [[[sg.Text(' '*10)] + [sg.Text('Вариант %s' % (i))]] for i in range(1, 6)]
    t2c4_header = [[sg.Text(' '*20)] + [sg.Text('Цель: Флот 2')]]
    t2c5_header = [[sg.Text(' '*10)] + [sg.Text('Турели и ракеты')]]
    
    t2c5_acc = [[sg.Text('Способ расчёта необходимого\n количества кораблей от меткости:\nФиксированный срез урона.')], [sg.Input(default_text = 'Меткость', size = (11, 1), readonly = True, enable_events = False), sg.Input(default_text = '80', size = (6, 1), key = 't2_acc', justification = 'right')], [sg.Input(default_text = 'Способ', size = (11, 1), readonly = True, enable_events = False), sg.Combo(['Фикс'], readonly = True, key = 't2_acc_type', default_value = 'Фикс')]]
    
    # keys Флот 1 модификаторы
    sub_column_1 = [[sg.Input(default_text = 'Атака', size = (12, 1), readonly = True, enable_events = False)]] + [[sg.Input(default_text = 'Защита', size = (12, 1), readonly = True, enable_events = False)]] + [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_type_damage] + [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_type_defense]
    sub_column_2 = [[sg.Input(default_text = '0', size = (12, 1), key = 't2c1m_' + str(i), justification = 'right')] for i in range(12)]

    # keys кол-во кораблей Флот 2
    sub_column_3 = [[sg.Text(headings_1[0])]] + [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_ship_names]
    sub_column_4 = [[sg.Text(headings_1[1])]] + [[sg.Input(default_text = '0', size = (12, 1), key = 't2c2_' + str(i), justification = 'right')] for i in range(9)]

    # keys Флот 2 модификаторы
    sub_column_5 = [[sg.Input(default_text = 'Атака', size = (12, 1), readonly = True, enable_events = False)]] + [[sg.Input(default_text = 'Защита', size = (12, 1), readonly = True, enable_events = False)]] + [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_type_damage] + [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_type_defense]
    sub_column_6 = [[sg.Input(default_text = '0', size = (12, 1), key = 't2c2m_' + str(i), justification = 'right')] for i in range(12)]

    sub_column_7 = []
    for i in range(5):
        sub_col_1 = [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_fleet_1]
        sub_col_2 = [[sg.Input(default_text = '0', size = (14, 1), key = 't2c3' + str(i) + '_' + str(j), readonly = True, justification = 'right')] for j in range(len(headings_fleet_1))]
        sub_column_7.append(sg.Column(t2c3_header[i] + [[sg.Column(sub_col_1), sg.Column(sub_col_2)]]))
    
    # key Турели и ракеты
    sub_column_15 = [[sg.Input(default_text = 'Тип планеты', readonly = True, size = (21, 1)), sg.Combo(default_planet_names , readonly = True, key = 't2_planet_type', default_value = 'T1 Ториум')], [sg.Input(default_text = 'Кол-во шахт', readonly = True, size = (21, 1)), sg.Combo(default_mines_quantity , readonly = True, key = 't2_planet_mines', default_value = '3 шахты')]]
    sub_column_15 += [[sg.Input(default_text = headings_type_turrets[i], size = (21, 1), readonly = True), sg.Input(default_text = '0', size = (10, 1), justification = 'right', key = 't2c6_' + str(i))] for i in range(3)]
    sub_column_15 += [[sg.Input(default_text = 'ЗБТ: наносить ли пассивный урон, если есть ракеты?', size = (21, 1), readonly = True), sg.Combo(['Да', 'Нет'], readonly = True, key = 't2_do_passive', default_value = 'Нет')]]
    #sub_column_15 += [[sg.Input(default_text = 'Ракеты по блокаде?', size = (21, 1), readonly = True), sg.Combo(['Да', 'Нет'], readonly = True, key = 't2_blockade', default_value = 'Нет')]]
    
    # keys потеряно кораблей Флот 2 и их стоимость
    sub_column_11 = [[sg.Text(headings_2[0])]] + [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_ship_names]
    #sub_column_12 = [[sg.Text(headings_2[1])]] + [[sg.Input(default_text = '0', size = (10, 1), key = 't2c41_' + str(i), readonly = True, justification = 'right')] for i in range(9)]
    sub_column_13 = [[sg.Text(headings_2[2])]] + [[sg.Input(default_text = '0', size = (12, 1), key = 't2c42_' + str(i), readonly = True, justification = 'right')] for i in range(9)]
    #sub_column_14 = [[sg.Text(headings_2[3])]] + [[sg.Input(default_text = 'Стоимость', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't2c43_0', readonly = True, justification = 'right')], [sg.Input(default_text = 'Ст-ть Потерь', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't2c43_1', readonly = True, justification = 'right')], [sg.Input(default_text = 'С. с вылетом', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't2c43_2', readonly = True, justification = 'right')], [sg.Input(default_text = 'Время строит.', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't2c43_4', readonly = True, justification = 'right')], [sg.Input(default_text = '', size = (14, 1), readonly = True, justification = 'center')]]
    sub_column_14 = [[sg.Text(headings_2[3])]] + [[sg.Input(default_text = 'Стоимость', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't2c43_0', readonly = True, justification = 'right')], [sg.Input(default_text = 'Время строит.', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't2c43_1', readonly = True, justification = 'right')], [sg.Input(default_text = '', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '', size = (14, 1), key = 't2c43_2', readonly = True, justification = 'right')], [sg.Input(default_text = '', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '', size = (14, 1), key = 't2c43_4', readonly = True, justification = 'right')], [sg.Input(default_text = '', size = (14, 1), readonly = True, justification = 'center')]]
    
    my_yseparator = [[sg.Text('|')] for i in range(29)]
    my_hseparator_1 = [[sg.Text('_'*200)]]
    my_hseparator_2 = [[sg.Text('_'*200)]]
    my_yseparator_col = sg.Column(my_yseparator)

    t2c1_row_module = [[sg.Column(sub_column_1), sg.Column(sub_column_2)]]
    t2c2_rows_ship_input = [[sg.Column(sub_column_3), sg.Column(sub_column_4)]]
    t2c2_row_module = [[sg.Column(sub_column_5), sg.Column(sub_column_6)]]    
    t2c3_rows_ship_output = [sub_column_7]
    #t2c3_rows_ship_output = [[sg.Column(sub_column_7), sg.Column(sub_column_8), sg.Column(sub_column_9), sg.Column(sub_column_10)]]
    t2c4_rows_ship_output = [[sg.Column(sub_column_11), sg.Column(sub_column_13), sg.Column(sub_column_14)]]
    t2c5_row_turrets = [[sg.Column(sub_column_15)]]
    
    tab2_column_1 = t2c1_header + t2c1_row_module
    tab2_column_2 = t2c2_header_1 + t2c2_rows_ship_input
    tab2_column_2_a = t2c2_header_2 + t2c2_row_module
    tab2_column_3 = t2c3_rows_ship_output
    tab2_column_4 = t2c4_header + t2c4_rows_ship_output
    tab2_column_5 = t2c5_acc + [[sg.Button('Найти минимальный флот')]]
    tab2_column_6 = t2c5_header + t2c5_row_turrets
    
    tab2_scrollable_column = my_hseparator_1 + [[sg.Column(tab2_column_1), sg.VSeperator(), sg.Column(tab2_column_2), sg.Column(tab2_column_2_a), sg.VSeperator(), sg.Column(tab2_column_5), sg.VSeperator(), sg.Column(tab2_column_6)]] + my_hseparator_2 + [[sg.Column(tab2_column_3), sg.VSeperator(), sg.Column(tab2_column_4)]]

    return [[my_yseparator_col, sg.Column(tab2_scrollable_column, scrollable = True, expand_x = True, expand_y = True)]]

def _tab3_layout():
    headings_1 = ['Корабль', 'Количество']
    headings_2 = ['Корабль', 'Выжило', 'Потеряно', 'Прочее']
    headings_ship_names = ['Джавелин', 'Хорнет', 'Раптор', 'Экскалибр', 'Аббадон', 'Локи', 'Геркулес', 'Валькирия', 'Титан']
    headings_type_damage = ['Лазер', 'Кинетика', 'Плазма', 'Ракеты', 'Рельса']
    headings_type_defense = ['от лазера', 'от кинетики', 'от плазмы', 'от ракет', 'от рельсы']
    headings_fleet_1 = ['Корабль', 'Количество', 'Стоимость', 'Время строит. всего флота', 'Выжило', 'Потеряно', 'Стоимость', 'С. с вылетом', 'Время строит. потерянного флота', 'Урона остал.'] # length 10
    
    t3c1_header = [[sg.Text(' '*0)] + [sg.Text('Модификаторы атаки, защиты (модуль),\nтипа урона и защиты от типа урона\n(Командоры).\nУказывать в процентах, например, 25')]]
    t3c2_header_1 =  [[sg.Text(' '*8)] + [sg.Text('Цель: Флот 2')]]
    t3c2_header_2 = [[sg.Text(' '*0)] + [sg.Text('Модификаторы атаки, защиты (модуль),\nтипа урона и защиты от типа урона\n(Командоры).\nУказывать в процентах, например, 25')]]
    t3c3_header = [[[sg.Text(' '*10)] + [sg.Text('Вариант %s' % (i))]] for i in range(1, 6)]
    t3c4_header = [[sg.Text(' '*20)] + [sg.Text('Цель: Флот 2')]]
    
    t3c5_acc = [[sg.Text('Способ расчёта урона от меткости:\nРандом для каждого корабля\n(например, 80% - 100%)\nили фиксированный срез урона\nнапример, 80% от урона')], [sg.Input(default_text = 'Меткость', size = (11, 1), readonly = True, enable_events = False), sg.Input(default_text = '80', size = (7, 1), key = 't3_acc', justification = 'right')], [sg.Input(default_text = 'Способ', size = (11, 1), readonly = True, enable_events = False), sg.Combo(['Рандом', 'Фикс'], readonly = True, key = 't3_acc_type', default_value = 'Фикс')]]
    
    # keys Флот 1 модификаторы
    sub_column_1 = [[sg.Input(default_text = 'Атака', size = (12, 1), readonly = True, enable_events = False)]] + [[sg.Input(default_text = 'Защита', size = (12, 1), readonly = True, enable_events = False)]] + [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_type_damage] + [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_type_defense]
    sub_column_2 = [[sg.Input(default_text = '0', size = (12, 1), key = 't3c1m_' + str(i), justification = 'right')] for i in range(12)]

    # keys кол-во кораблей Флот 2
    sub_column_3 = [[sg.Text(headings_1[0])]] + [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_ship_names]
    sub_column_4 = [[sg.Text(headings_1[1])]] + [[sg.Input(default_text = '0', size = (12, 1), key = 't3c2_' + str(i), justification = 'right')] for i in range(9)]

    # keys Флот 2 модификаторы
    sub_column_5 = [[sg.Input(default_text = 'Атака', size = (12, 1), readonly = True, enable_events = False)]] + [[sg.Input(default_text = 'Защита', size = (12, 1), readonly = True, enable_events = False)]] + [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_type_damage] + [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_type_defense]
    sub_column_6 = [[sg.Input(default_text = '0', size = (12, 1), key = 't3c2m_' + str(i), justification = 'right')] for i in range(12)]

    sub_column_7 = []
    for i in range(5):
        sub_col_1 = [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_fleet_1]
        sub_col_2 = [[sg.Input(default_text = '0', size = (14, 1), key = 't3c3' + str(i) + '_' + str(j), readonly = True, justification = 'right')] for j in range(len(headings_fleet_1))]
        sub_column_7.append(sg.Column(t3c3_header[i] + [[sg.Column(sub_col_1), sg.Column(sub_col_2)]]))
        
    
    # keys потеряно кораблей Флот 2 и их стоимость
    sub_column_11 = [[sg.Text(headings_2[0])]] + [[sg.Input(default_text = h, size = (12, 1), readonly = True, enable_events = False)] for h in headings_ship_names]
    #sub_column_12 = [[sg.Text(headings_2[1])]] + [[sg.Input(default_text = '0', size = (10, 1), key = 't3c41_' + str(i), readonly = True, justification = 'right')] for i in range(9)]
    sub_column_13 = [[sg.Text(headings_2[2])]] + [[sg.Input(default_text = '0', size = (12, 1), key = 't3c42_' + str(i), readonly = True, justification = 'right')] for i in range(9)]
    #sub_column_14 = [[sg.Text(headings_2[3])]] + [[sg.Input(default_text = 'Стоимость', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't3c43_0', readonly = True, justification = 'right')], [sg.Input(default_text = 'Ст-ть Потерь', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't3c43_1', readonly = True, justification = 'right')], [sg.Input(default_text = 'С. с вылетом', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't3c43_2', readonly = True, justification = 'right')], [sg.Input(default_text = 'Время строит.', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't3c43_4', readonly = True, justification = 'right')], [sg.Input(default_text = '', size = (14, 1), readonly = True, justification = 'center')]]
    sub_column_14 = [[sg.Text(headings_2[3])]] + [[sg.Input(default_text = 'Стоимость', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't3c43_0', readonly = True, justification = 'right')], [sg.Input(default_text = 'Время строит.', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '0', size = (14, 1), key = 't3c43_1', readonly = True, justification = 'right')], [sg.Input(default_text = '', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '', size = (14, 1), key = 't3c43_2', readonly = True, justification = 'right')], [sg.Input(default_text = '', size = (14, 1), readonly = True, justification = 'center')], [sg.Input(default_text = '', size = (14, 1), key = 't3c43_4', readonly = True, justification = 'right')], [sg.Input(default_text = '', size = (14, 1), readonly = True, justification = 'center')]]
    
    my_yseparator = [[sg.Text('|')] for i in range(29)]
    my_hseparator_1 = [[sg.Text('_'*200)]]
    my_hseparator_2 = [[sg.Text('_'*200)]]
    my_yseparator_col = sg.Column(my_yseparator)

    t3c1_row_module = [[sg.Column(sub_column_1), sg.Column(sub_column_2)]]
    t3c2_rows_ship_input = [[sg.Column(sub_column_3), sg.Column(sub_column_4)]]
    t3c2_row_module = [[sg.Column(sub_column_5), sg.Column(sub_column_6)]]    
    t3c3_rows_ship_output = [sub_column_7]
    #t3c3_rows_ship_output = [[sg.Column(sub_column_7), sg.Column(sub_column_8), sg.Column(sub_column_9), sg.Column(sub_column_10)]]
    t3c4_rows_ship_output = [[sg.Column(sub_column_11), sg.Column(sub_column_13), sg.Column(sub_column_14)]]
    
    tab3_column_1 = t3c1_header + t3c1_row_module
    tab3_column_2 = t3c2_header_1 + t3c2_rows_ship_input
    tab3_column_2_a = t3c2_header_2 + t3c2_row_module
    tab3_column_3 = t3c3_rows_ship_output
    tab3_column_4 = t3c4_header + t3c4_rows_ship_output
    tab3_column_5 = t3c5_acc + [[sg.Button('Рассчитать макс бонус')]]

    tab3_scrollable_column = my_hseparator_1 + [[sg.Column(tab3_column_1), sg.VSeperator(), sg.Column(tab3_column_2), sg.Column(tab3_column_2_a), sg.VSeperator(), sg.Column(tab3_column_5), sg.VSeperator()]] + my_hseparator_2 + [[sg.Column(tab3_column_3), sg.VSeperator(), sg.Column(tab3_column_4)]]

    return [[my_yseparator_col, sg.Column(tab3_scrollable_column, scrollable = True, expand_x = True, expand_y = True)]]

def _tab4_layout():
    header_1 = [[sg.Text(' ' * 29 + 'Планета')]]
    header_2 = [[sg.Text(' ' * 0 + 'Ракеты на планете:')]]
    header_2_b = [[sg.Text(' ' * 0 + 'Усиления Валькирий:')]]
    header_3 = [[sg.Text(' ' * 55 + 'Примерный флот Валькирий')]]
    header_3_1 = [[sg.Input(default_text = 'Цель:', readonly = True, size = (19, 1), justification = 'center'), sg.Input(default_text = 'Генератор щита', readonly = True, size = (19, 1))]]
    header_3_2 = [[sg.Input(default_text = 'Цель:', readonly = True, size = (19, 1), justification = 'center'), sg.Input(default_text = 'Ракетные башни', readonly = True, size = (19, 1))]]
    header_3_3 = [[sg.Input(default_text = 'Цель:', readonly = True, size = (19, 1), justification = 'center'), sg.Input(default_text = 'Остальные здания', readonly = True, size = (19, 1))]]
    header_4 = [[sg.Text(' ' * 10 + 'Валькирий на один уровень щита:')]]
    headings_1 = ['Валькирий', 'Стоимость флота', 'Время строительства', 'Потери', 'Стоимость потерь', 'Время строит. потерь']
    headings_2 = ['Валькирий', 'Стоимость флота', 'Время строительства', 'Потери', 'Стоимость потерь', 'Время строит. потерь']
    headings_3 = ['Валькирий', 'Стоимость флота', 'Время строительства', '', '', '']
    headings_4 = ['Бонус к атаке', 'Бонус к защите']
    headings_5 = ['Уровень щита', 'Валькирий', 'Потери']
    
    my_yseparator = [[sg.Text('|')] for i in range(29)]
    my_hseparator_1 = [[sg.Text('_'*150)]]
    my_hseparator_2 = [[sg.Text('_'*200)]]
    my_yseparator_col = sg.Column(my_yseparator)
    
    sub_column_part_1 = header_1 + [[sg.Input(default_text = 'Тип планеты', readonly = True, size = (19, 1)), sg.Combo(default_planet_names , readonly = True, key = 't4_planet_type', default_value = 'T1 Ториум')], [sg.Input(default_text = 'Кол-во шахт', readonly = True, size = (19, 1)), sg.Combo(default_mines_quantity , readonly = True, key = 't4_planet_mines', default_value = '3 шахты')]]
    sub_column_part_2 = [[sg.Input(default_text = 'Здание', readonly = True, size = (19, 1)), sg.Input(default_text = 'Суммарный уровень', readonly = True, size = (18, 1))]]
    sub_column_part_3 = [[sg.Input(default_text = default_buildings_defense_list[i][0], readonly = True, size = (19, 1)), sg.Input(default_text = '0', key = 't4_buildings_' + str(i), size = (18, 1), justification = 'right')] for i in range(len(default_buildings_defense_list))]
    
    sub_column_part_4 = header_2 + [[sg.Input(default_text = default_missiles_list[i][0], readonly = True, size = (14, 1)), sg.Input(default_text = '0', key = 't4_rockets_' + str(i), size = (10, 1), justification = 'right')] for i in range(1, 4)]
    
    sub_column_part_4_b = header_2_b + [[sg.Input(default_text = headings_4[i], readonly = True, size = (14, 1)), sg.Input(default_text = '0', key = 't4_buffs_' + str(i), size = (10, 1), justification = 'right')] for i in range(2)]
    
    sub_column_part_4_b += [[sg.Input(default_text = 'ЗБТ: наносить ли пассивный урон, если есть ракеты?', size = (18, 1), readonly = True), sg.Combo(['Да', 'Нет'], readonly = True, key = 't4_do_passive', default_value = 'Нет')]]
    
    sub_column_part_5_1 = header_3_1 + [[sg.Input(default_text = headings_1[i], readonly = True, size = (19, 1)), sg.Input(default_text = '0', readonly = True, size = (19, 1), key = 't4_out_1_' + str(i), justification = 'right')] for i in range(0, len(headings_1))]
    
    sub_column_part_5_2 = header_3_2 + [[sg.Input(default_text = headings_2[i], readonly = True, size = (19, 1)), sg.Input(default_text = '0', readonly = True, size = (19, 1), key = 't4_out_2_' + str(i), justification = 'right')] for i in range(0, len(headings_2))]
    
    sub_column_part_5_3 = header_3_3 + [[sg.Input(default_text = headings_3[i], readonly = True, size = (19, 1)), sg.Input(default_text = '0', readonly = True, size = (19, 1), key = 't4_out_3_' + str(i), justification = 'right')] for i in range(0, len(headings_3))]
    
    sub_column_2_part_1 = [[[sg.Input(default_text = headings_5[i], readonly = True, size = (13, 1)), sg.Input(default_text = '0', readonly = True, size = (8, 1), key = 't4_out_ss_' + str(i) + '_' + str(30 - j), justification = 'right')] for i in range(0, len(headings_5))] for j in range(30)]
    
    tab4_pre_column_1 = sub_column_part_1 + sub_column_part_2 + sub_column_part_3
    tab4_pre_column_2 = sub_column_part_4
    tab4_pre_column_2_b = sub_column_part_4_b
    tab4_pre_column_3_a = [[sg.Column(sub_column_part_5_1), sg.Column(sub_column_part_5_2), sg.Column(sub_column_part_5_3)]]
    tab4_pre_column_3_b = [[sg.Column(tab4_pre_column_3_a)]]
    tab4_pre_column_3 = header_3 + tab4_pre_column_3_b + [[sg.Button('Рассчитать')]] + [[sg.Button('Особенности расчёта')]]
    tab4_pre_column_4_1 = [[sg.Column(sub_column_2_part_1[i]) for i in range( 0,  6)]]
    tab4_pre_column_4_2 = [[sg.Column(sub_column_2_part_1[i]) for i in range( 6, 12)]]
    tab4_pre_column_4_3 = [[sg.Column(sub_column_2_part_1[i]) for i in range(12, 18)]]
    tab4_pre_column_4_4 = [[sg.Column(sub_column_2_part_1[i]) for i in range(18, 24)]]
    tab4_pre_column_4_5 = [[sg.Column(sub_column_2_part_1[i]) for i in range(24, 30)]]
    tab4_pre_column_4_all = tab4_pre_column_4_1 + tab4_pre_column_4_2 + tab4_pre_column_4_3 + tab4_pre_column_4_4 + tab4_pre_column_4_5
    tab4_pre_column_4 = my_hseparator_2 + header_4 + [[sg.Column(tab4_pre_column_4_all)]]
    tab4_column_1 = sg.Column(tab4_pre_column_1)
    tab4_column_2 = sg.Column(tab4_pre_column_2 + tab4_pre_column_2_b)
    tab4_column_3 = sg.Column(tab4_pre_column_3)
    tab4_column_4 = sg.Column(tab4_pre_column_4)
    tab4_column = [[tab4_column_1, tab4_column_2, sg.VSeperator(), tab4_column_3]] + [[tab4_column_4]]
    tab4_layout = [[sg.Column(tab4_column, scrollable = True, expand_x = True, expand_y = True)]]
    return tab4_layout
    
def _main():
    global listofships
    global thold_per
    global thold_max
    global thold_max_bonus
    
    sg.theme("GreenMono")
    
    to_check_ids_tab_1 = ['t1c1' + str(i) + str(j) for i in range(1, 3) for j in range(0, 9)]
    to_check_ids_tab_1_a = ['t1c1m' + str(i) for i in range(12)] + ['t1c1n' + str(i) for i in range(12)]
    to_check_ids_tab_1_b = ['t1_acc']
    to_check_ids_tab_1_c = ['t1c8_' + str(i) for i in range(5)]
    to_check_ids_tab_2 = ['t2c2_' + str(i) for i in range(9)]
    to_check_ids_tab_2_a = ['t2c1m_' + str(i) for i in range(12)] + ['t2c2m_' + str(i) for i in range(12)]
    to_check_ids_tab_2_b = ['t2_acc']
    to_check_ids_tab_2_c = ['t2c6_' + str(i) for i in range(3)]
    to_check_ids_tab_3 = ['t3c2_' + str(i) for i in range(9)]
    to_check_ids_tab_3_a = ['t3c1m_' + str(i) for i in range(12)] + ['t3c2m_' + str(i) for i in range(12)]
    to_check_ids_tab_3_b = ['t3_acc']
    to_check_ids_tab_4 = ['t4_buildings_' + str(i) for i in range(len(default_buildings_defense_list))] + ['t4_rockets_' + str(i) for i in range(1, 4)] + ['t4_buffs_' + str(i) for i in range(2)]
    text = "to_check_ids_tab_1 list:\n%s" % (to_check_ids_tab_1)
    _log(text)
    print(text)
    text = "to_check_ids_tab_1_a list:\n%s\nand tab_1_b: %s\nand tab_1_c: %s" % (to_check_ids_tab_1_a, to_check_ids_tab_1_b, to_check_ids_tab_1_c)
    _log(text)
    print(text)
    text = "to_check_ids_tab_2 list:\n%s" % (to_check_ids_tab_2)
    _log(text)
    print(text)
    text = "to_check_ids_tab_2_a list:\n%s\nand tab_2_b: %s" % (to_check_ids_tab_2_a, to_check_ids_tab_2_b)
    _log(text)
    print(text)
    text = "to_check_ids_tab_3 list:\n%s" % (to_check_ids_tab_3)
    _log(text)
    print(text)
    text = "to_check_ids_tab_3_a list:\n%s\nand tab_3_b: %s" % (to_check_ids_tab_3_a, to_check_ids_tab_3_b)
    _log(text)
    print(text)
    text = "to_check_ids_tab_4 list:\n%s" % (to_check_ids_tab_4)
    _log(text)
    print(text)
    menu_def = [['&File', 'E&xit'], ['Se&ttings', ['Parameters', 'Globals']], ['&Help', ['Description', 'About...']]]
    menu = [[sg.Menu(menu_def, key='_MENU_')]]

    tab1_layout = _tab1_layout()
    tab2_layout = _tab2_layout()
    tab3_layout = _tab3_layout()
    tab4_layout = _tab4_layout()

    #tab_group = [[sg.TabGroup([[sg.Tab('Флот 1 против Флота 2', tab1_layout), sg.Tab('Найти минимальный флот против цели', tab2_layout), sg.Tab('Найти макс бонус преимущества', tab3_layout)]])]]
    
    tab_group = [[sg.TabGroup([[sg.Tab('Флот 1 против Флота 2', tab1_layout), sg.Tab('Найти минимальный флот против цели', tab2_layout), sg.Tab('Найти макс бонус преимущества', tab3_layout), sg.Tab('Планетарная бомбардировка', tab4_layout)]])]]

    layout = menu + tab_group

    window = sg.Window("Galaxy Online Калькулятор боёв", layout, size = (1250, 780), resizable = True, keep_on_top = False, element_justification = 'center', grab_anywhere = False, location=(10, 10), icon = galaxy_icon)
    
    if not os.path.isfile("globals.txt"):
        _my_popup_description_first()
        _save_globals_to_file(global_defaults)
        if not os.path.isfile("ships.txt"):
            _save_ships_to_file(default_ship_list)
    
    listofships = _load_ships_from_file()
    loaded_globals = _load_globals_from_file()
    thold_per = float(loaded_globals[0])
    thold_max_bonus = int(loaded_globals[1])
    thold_max = _my_round_threshhold_up(1 + thold_max_bonus / 100, 7, 0.5)
    text = "\nInitialization.\nLoaded ships:\n%s" % (listofships)
    _log(text)
    print(text)
    
    while True:
        event, values = window.read()
        if event == sg.WIN_CLOSED:
            break
        elif event == "Parameters":
            _options_popup()
        elif event == "Globals":
            _global_settings_popup()
        elif event == "Description":
            _my_popup_description()
        elif event == "About...":
            _my_popup_about()
        elif event == "Exit":
            break
        elif event == "Рассчитать потери":
            if _check_is_a_positive_number(values, to_check_ids_tab_1) and _check_is_a_positive_number(values, to_check_ids_tab_1_c):
                if _check_is_a_number(values, to_check_ids_tab_1_a):
                    team1 = [int(values['t1c11' + str(i)]) for i in range(9)]
                    orig_var_team1 = [int(values['t1c11' + str(i)]) for i in range(9)]
                    overall_team1_ships_lost = [0 for i in range(9)]
                    team2 = [int(values['t1c12' + str(i)]) for i in range(9)]
                    flag_empty_team = False
                    sum_of_ships_1 = 0
                    sum_of_ships_2 = 0
                    for i in range(len(team1)):
                        sum_of_ships_1 += team1[i]
                    for i in range(len(team2)):
                        sum_of_ships_2 += team2[i]
                    if sum_of_ships_1 == 0:# or sum_of_ships_2 == 0:
                        flag_empty_team = True
                    if not flag_empty_team:
                        if values['t1c1_att'] == 'В атаке':
                            att_def_1 = True
                        else:
                            att_def_1 = False
                        if values['t1c2_att'] == 'В атаке':
                            att_def_2 = True
                        else:
                            att_def_2 = False
                        module1 = [1 + int(values['t1c1m0']) / 100, 1 + int(values['t1c1m1']) / 100]
                        module2 = [1 + int(values['t1c1n0']) / 100, 1 + int(values['t1c1n1']) / 100]
                        damage_type_mod_1 = [(1 + int(values['t1c1m' + str(i)]) / 100) for i in range(2, 7)]
                        damage_type_mod_2 = [(1 + int(values['t1c1n' + str(i)]) / 100) for i in range(2, 7)]
                        defense_type_mod_1 = [(1 + int(values['t1c1m' + str(i)]) / 100) for i in range(7, 12)]
                        defense_type_mod_2 = [(1 + int(values['t1c1n' + str(i)]) / 100) for i in range(7, 12)]
                        if _check_is_a_number_in_range(values, to_check_ids_tab_1_b, 1, 100):
                            accuracy = int(values['t1_acc'])
                        else:
                            accuracy = 100
                            window['t1_acc'].update(value = 100)
                        if values['t1_acc_type'] == 'Рандом':
                            type_acc_random = True
                        else:
                            type_acc_random = False
                        
                        # This is the place for turret and rocket calculations
                        if values['t1_blockade'] == "Да":
                            on_blockade = True
                        else:
                            on_blockade = False
                        if values['t1_do_passive'] == "Да":
                            do_passive_overwrite = True
                        else:
                            do_passive_overwrite = False
                        if values['t1_blockade_priority'] == "Атака":
                            on_blockade_attack = True
                        else:
                            on_blockade_attack = False
                        j = int(values['t1_planet_type'][1])
                        k = int(values['t1_planet_mines'][0])
                        planetary_coef = default_planetary_coefs[j][k]
                        turret_damage = 100 * planetary_coef
                        turret_level = int(values['t1c8_0'])
                        all_rockets_raw = []
                        for i in range(4):
                            all_rockets_raw.append(int(values['t1c8_' + str(i + 1)]))
                        text = "\nPlanetary_coef %s, turret_damage %s, turret_level %s, rocket_list %s" % (planetary_coef, turret_damage, turret_level, all_rockets_raw)
                        _log(text)
                        print(text)
                        all_rockets = []
                        for i in range(len(all_rockets_raw)):
                            all_rockets.append(default_missiles_list[i][1] * all_rockets_raw[i])
                        do_passive = True
                        if all_rockets[0] != 0 or all_rockets[1] != 0 or all_rockets[2] != 0 or all_rockets[3] != 0:
                            do_passive = False
                        # Why? Because at the last moment in Closed Beta it was changed to do passive damage if there are rocket missiles present on the planet
                        if do_passive_overwrite:
                            do_passive = True
                        else:
                            do_passive = False
                        if not on_blockade:
                            if do_passive:
                                # Turret passive damage
                                turret_sum_damage = turret_damage * turret_level
                                turret_results = _simulate_turret_damage(team1, module1, turret_sum_damage, defense_type_mod_1, threshhold)
                                # [team1_ships_dead, team1_cost_dead, team1_ships_left, team1_cost, team2_damage_left, _calc_build_time(team1_ships_dead), _calc_build_time(team1)]
                                team1 = []
                                for ship in turret_results[2]:
                                    team1.append(ship)
                                for i in range(len(turret_results[0])):
                                    overall_team1_ships_lost[i] += turret_results[0][i]
                                text = "\nTeam1 ships destroyed by passive damage:\n%s\nTeam1 ships left:\n%s\nTeam1 overall losses:\n%s\n" % (turret_results[0], team1, overall_team1_ships_lost)
                                _log(text)
                                print(text)
                                sum_of_ships_1 = 0
                                for i in range(len(team1)):
                                    sum_of_ships_1 += team1[i]
                                if sum_of_ships_1 == 0:
                                    flag_empty_team = True
                                else:
                                    flag_empty_team = False
                                #
                            # Valkyr
                            if team1[7] != 0 and all_rockets[3] != 0:
                                valkyr_dead_from_xray = int(_my_round_threshhold_up(all_rockets[3] * 100 / (listofships[7][13] * module1[1] * defense_type_mod_1[3]), 0, threshhold))
                                # all_rockets[3]
                                # int(_my_round_threshhold_up(all_rockets[3] * 100 / (listofships[7][13] * module1[1] * defense_type_mod_1[3]), 0, threshhold))
                                if team1[7] <= valkyr_dead_from_xray:
                                    valkyr_dead_from_xray = team1[7]
                                team1[7] -= valkyr_dead_from_xray
                                text = "%s Valkyrs were destroyed by %s X-Ray missiles." % (valkyr_dead_from_xray, all_rockets[3])
                                _log(text)
                                print(text)
                                overall_team1_ships_lost[7] += valkyr_dead_from_xray
                                text = "\nTeam1 ships left:\n%s\nTeam1 overall losses:\n%s\n" % (team1, overall_team1_ships_lost)
                                _log(text)
                                print(text)
                                sum_of_ships_1 = 0
                                for i in range(len(team1)):
                                    sum_of_ships_1 += team1[i]
                                if sum_of_ships_1 == 0:
                                    flag_empty_team = True
                                else:
                                    flag_empty_team = False
                            #
                            # Cobra
                            if not flag_empty_team:
                                if all_rockets[1] != 0:
                                    rocket_results = _simulate_rocket_damage(team1, all_rockets[1], 1, module1, True, defense_type_mod_1, threshhold)
                                    team1 = []
                                    for ship in rocket_results[2]:
                                        team1.append(ship)
                                    for i in range(len(rocket_results[0])):
                                        overall_team1_ships_lost[i] += rocket_results[0][i]
                                    text = "\nTeam1 ships destroyed by %s %s rockets:\n%s\nTeam1 ships left:\n%s\nTeam1 overall losses:\n%s\n" % (all_rockets[1], default_missiles_list[1][0], rocket_results[0], team1, overall_team1_ships_lost)
                                    _log(text)
                                    print(text)
                                    sum_of_ships_1 = 0
                                    for i in range(len(team1)):
                                        sum_of_ships_1 += team1[i]
                                    if sum_of_ships_1 == 0:
                                        flag_empty_team = True
                                    else:
                                        flag_empty_team = False
                            #
                            # Avrora
                            if not flag_empty_team:
                                if all_rockets[2] != 0:
                                    rocket_results = _simulate_rocket_damage(team1, all_rockets[2], 2, module1, True, defense_type_mod_1, threshhold)
                                    team1 = []
                                    for ship in rocket_results[2]:
                                        team1.append(ship)
                                    for i in range(len(rocket_results[0])):
                                        overall_team1_ships_lost[i] += rocket_results[0][i]
                                    text = "\nTeam1 ships destroyed by %s %s rockets:\n%s\nTeam1 ships left:\n%s\nTeam1 overall losses:\n%s\n" % (all_rockets[2], default_missiles_list[2][0], rocket_results[0], team1, overall_team1_ships_lost)
                                    _log(text)
                                    print(text)
                                    sum_of_ships_1 = 0
                                    for i in range(len(team1)):
                                        sum_of_ships_1 += team1[i]
                                    if sum_of_ships_1 == 0:
                                        flag_empty_team = True
                                    else:
                                        flag_empty_team = False
                            # _simulate_rocket_damage(team1, all_rockets, r_id, module1, att_def_1, defense_type_mod_1, threshhold)
                            # [team1_ships_dead, team1_cost_dead, team1_ships_left, team1_cost, all_rockets, _calc_build_time(team1_ships_dead), _calc_build_time(team1)]
                            #
                        else:
                            # Sticks XL
                            if all_rockets[0] != 0:
                                rocket_results = _simulate_rocket_damage(team1, all_rockets[0], 0, module1, on_blockade_attack, defense_type_mod_1, threshhold)
                                team1 = []
                                for ship in rocket_results[2]:
                                    team1.append(ship)
                                for i in range(len(rocket_results[0])):
                                    overall_team1_ships_lost[i] += rocket_results[0][i]
                                text = "\nTeam1 ships destroyed by %s %s rockets:\n%s\nTeam1 ships left:\n%s\nTeam1 overall losses:\n%s\n" % (all_rockets[0], default_missiles_list[0][0], rocket_results[0], team1, overall_team1_ships_lost)
                                _log(text)
                                print(text)
                                sum_of_ships_1 = 0
                                for i in range(len(team1)):
                                    sum_of_ships_1 += team1[i]
                                if sum_of_ships_1 == 0:
                                    flag_empty_team = True
                                else:
                                    flag_empty_team = False
                            #
                            # Avrora
                            if not flag_empty_team:
                                if all_rockets[2] != 0:
                                    rocket_results = _simulate_rocket_damage(team1, all_rockets[2], 2, module1, on_blockade_attack, defense_type_mod_1, threshhold)
                                    team1 = []
                                    for ship in rocket_results[2]:
                                        team1.append(ship)
                                    for i in range(len(rocket_results[0])):
                                        overall_team1_ships_lost[i] += rocket_results[0][i]
                                    text = "\nTeam1 ships destroyed by %s %s rockets:\n%s\nTeam1 ships left:\n%s\nTeam1 overall losses:\n%s\n" % (all_rockets[2], default_missiles_list[2][0], rocket_results[0], team1, overall_team1_ships_lost)
                                    _log(text)
                                    print(text)
                                    sum_of_ships_1 = 0
                                    for i in range(len(team1)):
                                        sum_of_ships_1 += team1[i]
                                    if sum_of_ships_1 == 0:
                                        flag_empty_team = True
                                    else:
                                        flag_empty_team = False
                            # _simulate_rocket_damage(team1, all_rockets, r_id, module1, att_def_1, defense_type_mod_1, threshhold)
                            # [team1_ships_dead, team1_cost_dead, team1_ships_left, team1_cost, all_rockets, _calc_build_time(team1_ships_dead), _calc_build_time(team1)]
                            #
                        flag_empty_team2 = False
                        sum_of_ships_2 = 0
                        for i in range(len(team2)):
                            sum_of_ships_2 += team2[i]
                        if sum_of_ships_2 == 0:
                            flag_empty_team2 = True
                        if not flag_empty_team and not flag_empty_team2:
                            tab_1_results = _simulate_straight(team1, team2, att_def_1, att_def_2, module1, module2, damage_type_mod_1, damage_type_mod_2, defense_type_mod_1, defense_type_mod_2, threshhold, type_acc_random, accuracy)
                            # [[team1_ships_dead, team1_cost_dead, team1_ships_left, team1_cost, team1_damage_left, _calc_build_time(team1_ships_dead), _calc_build_time(team1), s_id], [team2_ships_dead, team2_cost_dead, team2_ships_left, team2_cost, team2_damage_left, _calc_build_time(team2_ships_dead), _calc_build_time(team2)]]
                            for i in range(len(tab_1_results[0][0])):
                                overall_team1_ships_lost[i] += tab_1_results[0][0][i]
                            tab_1_results[0][0] = overall_team1_ships_lost
                            tab_1_results[0][1] = _calc_energy_cost(_team_into_id_ship(overall_team1_ships_lost))
                            tab_1_results[0][3] = _calc_energy_cost(_team_into_id_ship(orig_var_team1))
                            tab_1_results[0][5] = _calc_build_time(overall_team1_ships_lost)
                            tab_1_results[0][6] = _calc_build_time(orig_var_team1)
                            text = "\n\nTeam1:\nStarting\n%s\nEnergy cost\n%s\nDestroyed\n%s\nEnergy cost\n%s + %s = %s\nAlive\n%s\n\nTeam2:\nStarting\n%s\nEnergy cost\n%s\nDestroyed\n%s\nEnergy cost\n%s + %s = %s\nAlive\n%s\n\nTeam1 Damage left\n%s\nTeam2 Damage left\n%s\n\n" % (orig_var_team1, tab_1_results[0][3], tab_1_results[0][0], tab_1_results[0][1], _my_round_threshhold_up(tab_1_results[0][3] * 0.02, 0, 0.5), _my_round_threshhold_up(tab_1_results[0][1] + tab_1_results[0][3] * 0.02, 0, 0.5), tab_1_results[0][2], team2, tab_1_results[1][3], tab_1_results[1][0], tab_1_results[1][1], _my_round_threshhold_up(tab_1_results[1][3] * 0.02, 0, 0.5), _my_round_threshhold_up(tab_1_results[1][1] + tab_1_results[1][3] * 0.02, 0, 0.5), tab_1_results[1][2], tab_1_results[0][4], tab_1_results[1][4])
                            _log(text)
                            print(text)
                        else:
                            tab_1_results = []
                            tab_1_results.append([])
                            tab_1_results[0].append(overall_team1_ships_lost)
                            tab_1_results[0].append(_calc_energy_cost(_team_into_id_ship(overall_team1_ships_lost)))
                            tab_1_results[0].append(team1)
                            tab_1_results[0].append(_calc_energy_cost(_team_into_id_ship(orig_var_team1)))
                            team1_damage = _calc_damage_by_types_straight(type_acc_random, accuracy, team1, module1, damage_type_mod_1)
                            tab_1_results[0].append(team1_damage)
                            tab_1_results[0].append(_calc_build_time(overall_team1_ships_lost))
                            tab_1_results[0].append(_calc_build_time(orig_var_team1))
                            tab_1_results[0].append(0)
                            tab_1_results.append([])
                            tab_1_results[1].append([0, 0, 0, 0, 0, 0, 0, 0, 0])
                            tab_1_results[1].append(0)
                            tab_1_results[1].append(team2)
                            tab_1_results[1].append(_calc_energy_cost(_team_into_id_ship(team2)))
                            # _calc_damage_by_types_straight(type_acc_random, accuracy, ships, ships_mod, damage_type_mod)
                            team2_damage = _calc_damage_by_types_straight(type_acc_random, accuracy, team2, module2, damage_type_mod_2)
                            tab_1_results[1].append(team2_damage)
                            tab_1_results[1].append(0)
                            tab_1_results[1].append(_calc_build_time(team2))
                            
                        for i in range(9):
                            window['t1c51_' + str(i)].update(value = _separator_for_output(tab_1_results[0][2][i]))
                            window['t1c52_' + str(i)].update(value = _separator_for_output(tab_1_results[0][0][i]))
                            window['t1c61_' + str(i)].update(value = _separator_for_output(tab_1_results[1][2][i]))
                            window['t1c62_' + str(i)].update(value = _separator_for_output(tab_1_results[1][0][i]))
                        window['t1c51_9'].update(value = _separator_for_output(tab_1_results[0][6]))
                        window['t1c61_9'].update(value = _separator_for_output(tab_1_results[1][6]))
                        window['t1c220'].update(value = _separator_for_output(tab_1_results[0][3]))
                        window['t1c221'].update(value = _separator_for_output(tab_1_results[0][1]))
                        window['t1c222'].update(value = _separator_for_output(int(_my_round_threshhold_up(tab_1_results[0][1] + tab_1_results[0][3] * 0.02, 0, 0.5))))
                        window['t1c320'].update(value = _separator_for_output(tab_1_results[1][3]))
                        window['t1c321'].update(value = _separator_for_output(tab_1_results[1][1]))
                        window['t1c322'].update(value = _separator_for_output(int(_my_round_threshhold_up(tab_1_results[1][1] + tab_1_results[1][3] * 0.02, 0, 0.5))))
                        dmg_left = []
                        for j in range(2):
                            dmg = 0
                            for i in range(5):
                                dmg += tab_1_results[j][4][i][1]
                            dmg_left.append(int(dmg))
                        window['t1c223'].update(value = _separator_for_output(dmg_left[0]))
                        window['t1c323'].update(value = _separator_for_output(dmg_left[1]))
                        window['t1c224'].update(value = _separator_for_output(tab_1_results[0][5]))
                        window['t1c324'].update(value = _separator_for_output(tab_1_results[1][5]))
        elif event == "Найти минимальный флот":
            if _check_is_a_positive_number(values, to_check_ids_tab_2) and _check_is_a_positive_number(values, to_check_ids_tab_2_c):
                if _check_is_a_number(values, to_check_ids_tab_2_a):
                    team2 = [int(values['t2c2_' + str(i)]) for i in range(9)]
                    flag_empty_team = False
                    for i in range(len(team2)):
                        if team2[i] != 0:
                            flag_empty_team = False
                            break
                        else:
                            flag_empty_team = True
                    if not flag_empty_team:
                        att_def_1 = True
                        att_def_2 = True
                        module1 = [1 + int(values['t2c1m_0']) / 100, 1 + int(values['t2c1m_1']) / 100]
                        module2 = [1 + int(values['t2c2m_0']) / 100, 1 + int(values['t2c2m_1']) / 100]
                        damage_type_mod_1 = [(1 + int(values['t2c1m_' + str(i)]) / 100) for i in range(2, 7)]
                        damage_type_mod_2 = [(1 + int(values['t2c2m_' + str(i)]) / 100) for i in range(2, 7)]
                        defense_type_mod_1 = [(1 + int(values['t2c1m_' + str(i)]) / 100) for i in range(7, 12)]
                        defense_type_mod_2 = [(1 + int(values['t2c2m_' + str(i)]) / 100) for i in range(7, 12)]
                        if _check_is_a_number_in_range(values, to_check_ids_tab_2_b, 1, 100):
                            accuracy = int(values['t2_acc'])
                        else:
                            accuracy = 100
                            window['t2_acc'].update(value = 100)
                        type_acc_random = False
                        
                        # This is the place for turret and rocket calculations
                        #if values['t2_blockade'] == "Да":
                        #    on_blockade = True
                        #else:
                        #    on_blockade = False
                        # Why? Because at the last moment in Closed Beta it was changed to do passive damage if there are rocket missiles present on the planet
                        if values['t2_do_passive'] == "Да":
                            do_passive = True
                        else:
                            do_passive = False
                        on_blockade = False
                        j = int(values['t2_planet_type'][1])
                        k = int(values['t2_planet_mines'][0])
                        planetary_coef = default_planetary_coefs[j][k]
                        turret_level = int(values['t2c6_0'])
                        turret_sum_damage = 100 * planetary_coef * turret_level
                        all_rockets = [0]
                        for i in range(2):
                            all_rockets.append(int(values['t2c6_' + str(i + 1)]))
                        text = "\nPlanetary_coef %s, turret_sum_damage %s, turret_level %s, rocket_list %s" % (planetary_coef, turret_sum_damage, turret_level, all_rockets)
                        _log(text)
                        print(text)
                        to_add_ships_list = []
                        for i in range(5):
                            to_add_ships_list.append(_dead_ships_from_turrets(i, module1, defense_type_mod_1, all_rockets, turret_sum_damage, on_blockade, do_passive, threshhold))
                        text = "\nShips will die from turrets or rockets:\n%s\n" % (to_add_ships_list)
                        _log(text)
                        print(text)
                        
                        forstatistics = []
                        needed_ships, damage_left = _calc_needed_ships(team2, module1, module2, damage_type_mod_1, defense_type_mod_2, threshhold, type_acc_random, accuracy)
                        #_calc_needed_ships(team2, module1, module2, damage_type_mod_1, defense_type_mod_2, threshhold, type_acc_random, accuracy)
                        
                        #print(needed_ships)
                        text = "Minimum amount of ships to destroy opponent with %s%% accuracy\n%s" % (accuracy, needed_ships)
                        print(text)
                        _log(text)
                        old_acc = accuracy
                        accuracy = 100
                        compositions = _change_found_to_sole(needed_ships)
                        for comp in compositions:
                            forstatistics.append(_simulate_straight(comp, team2, att_def_1, att_def_2, module1, module2, damage_type_mod_1, damage_type_mod_2, defense_type_mod_1, defense_type_mod_2, threshhold, type_acc_random, accuracy))
                        for i in range(5):
                            forstatistics[i].append(int(damage_left[i]))
                        
                        #[[team1_ships_dead, team1_cost_dead, team1_ships_left, team1_cost, team1_damage_left, _calc_build_time(team1_ships_dead), _calc_build_time(team1), s_id], [team2_ships_dead, team2_cost_dead, team2_ships_left, team2_cost, team2_damage_left, _calc_build_time(team2_ships_dead), _calc_build_time(team2)]]
                        
                        print(forstatistics)
                        for i in range(5):
                            forstatistics[i][0][0][i] += to_add_ships_list[i]
                            forstatistics[i][0][1] += to_add_ships_list[i] * listofships[i][9]
                            forstatistics[i][0][3] += to_add_ships_list[i] * listofships[i][9]
                            forstatistics[i][0][5] += to_add_ships_list[i] * listofships[i][15]
                            forstatistics[i][0][6] += to_add_ships_list[i] * listofships[i][15]
                            needed_ships[i] += to_add_ships_list[i]
                        
                        tab_2_results = []
                        for s_i in range(5):
                            if len(forstatistics) != 1:
                                min_cost = forstatistics[0][0][1]
                                index = 0
                                for s_j in range(0, len(forstatistics)):
                                    if min_cost > forstatistics[s_j][0][1]:
                                        min_cost = forstatistics[s_j][0][1]
                                        index = s_j
                                tab_2_results.append(forstatistics[index])
                                forstatistics.pop(index)
                            else:
                                tab_2_results.append(forstatistics[0])
                                forstatistics.clear()
                        # t2c30_0, t2c30_8, t2c34_0, t2c34_8
                        # ['Корабль', 'Количество', 'Стоимость', 'Время строит.', 'Выжило', 'Потеряно', 'Стоимость', 'С. с вылетом', 'Время строит.', 'Урона осталось'] # length 10
                        dmg_left = []
                        for j in range(5):
                            dmg = 0
                            for i in range(5):
                                dmg += tab_2_results[j][0][4][i][1]
                            dmg_left.append(int(dmg))
                        s_ids = []
                        for s_i in range(0, 5):
                            s_ids.append(tab_2_results[s_i][0][7])
                        #for s_i in range(0, 5):
                        #    for s_j in range(0, 5):
                        #        if tab_2_results[s_i][0][0][s_j] != 0:
                        #            s_ids.append(s_j)
                        #            break
                        names_ids = _translate_id_to_name(s_ids)
                        for i in range(5):
                            window['t2c3' + str(i) + '_0'].update(value = names_ids[i])
                            window['t2c3' + str(i) + '_1'].update(value = _separator_for_output(needed_ships[s_ids[i]]))
                            window['t2c3' + str(i) + '_2'].update(value = _separator_for_output(tab_2_results[i][0][3]))
                            window['t2c3' + str(i) + '_3'].update(value = _separator_for_output(tab_2_results[i][0][6]))
                            window['t2c3' + str(i) + '_4'].update(value = _separator_for_output(tab_2_results[i][0][2][s_ids[i]]))
                            window['t2c3' + str(i) + '_5'].update(value = _separator_for_output(tab_2_results[i][0][0][s_ids[i]]))
                            window['t2c3' + str(i) + '_6'].update(value = _separator_for_output(tab_2_results[i][0][1]))
                            window['t2c3' + str(i) + '_7'].update(value = _separator_for_output(int(_my_round_threshhold_up(tab_2_results[i][0][1] + tab_2_results[i][0][3] * 0.02, 0, 0.5))))
                            window['t2c3' + str(i) + '_8'].update(value = _separator_for_output(tab_2_results[i][0][5]))
                            #window['t2c3' + str(i) + '_9'].update(value = _separator_for_output(dmg_left[i]))
                            window['t2c3' + str(i) + '_9'].update(value = _separator_for_output(tab_2_results[i][2]))
                            
                        for i in range(9):
                            window['t2c42_' + str(i)].update(value = _separator_for_output(tab_2_results[0][1][0][i]))
                        
                        window['t2c43_0'].update(value = _separator_for_output(tab_2_results[0][1][3]))
                        window['t2c43_1'].update(value = _separator_for_output(tab_2_results[0][1][5]))
                        #window['t2c43_2'].update(value = _separator_for_output(int(_my_round_threshhold_up(tab_2_results[0][1][1] + tab_2_results[0][1][3] * 0.02, 0, 0.5))))
                        #window['t2c43_4'].update(value = _separator_for_output(tab_2_results[0][1][5]))
                        
                        add_text = ""
                        for s_i in range(0, 9):
                            if team2[s_i] != 0:
                                add_text += _separator_for_output(team2[s_i]) + " " + listofships[s_i][0] + "\n"
                        text = "\nSorted list of minimum proposed ship counter in ascending order of lost ships costs:\nN.B.Ship number is for accuracy %s%%, Ships defeated is with accuracy 100%%\nAgainst\n%sCost %s\nBuild time %s\n---------\n\n" % (old_acc, add_text, _separator_for_output(tab_2_results[0][1][3]), _separator_for_output(tab_2_results[0][1][6]))
                        for s_i in range(0, 5):
                            #for s_j in range(0, 5):
                            #    if tab_2_results[s_i][0][0][s_j] != 0:
                            #        s_id = s_j
                            #        break
                            s_id = s_ids[s_i]
                            text += "    %s    %s\n    %s    lost ships\n%s    lost cost\n%s    build time\n\n" % (_separator_for_output(int(needed_ships[s_id])), listofships[s_id][0], _separator_for_output(int(tab_2_results[s_i][0][0][s_id])), _separator_for_output(int(_my_round_up(tab_2_results[s_i][0][1]))), _separator_for_output(tab_2_results[s_i][0][5]))
                        _log(text)
                        print(text)
                        
        elif event == "Рассчитать макс бонус":
            if thold_max_bonus == 0:
                title = "Ошибка макс бонуса"
                text = "Макс бонус в глобальных переменных был установлен на 0, поиск кораблей для макс бонуса невозможен."
                _error_popup_value_error(title, text)
            else:
                if _check_is_a_positive_number(values, to_check_ids_tab_3):
                    if _check_is_a_number(values, to_check_ids_tab_3_a):
                        team2 = [int(values['t3c2_' + str(i)]) for i in range(9)]
                        flag_empty_team = False
                        for i in range(len(team2)):
                            if team2[i] != 0:
                                flag_empty_team = False
                                break
                            else:
                                flag_empty_team = True
                        if not flag_empty_team:
                            att_def_1 = True
                            att_def_2 = True
                            module1 = [1 + int(values['t3c1m_0']) / 100, 1 + int(values['t3c1m_1']) / 100]
                            module2 = [1 + int(values['t3c2m_0']) / 100, 1 + int(values['t3c2m_1']) / 100]
                            damage_type_mod_1 = [(1 + int(values['t3c1m_' + str(i)]) / 100) for i in range(2, 7)]
                            damage_type_mod_2 = [(1 + int(values['t3c2m_' + str(i)]) / 100) for i in range(2, 7)]
                            defense_type_mod_1 = [(1 + int(values['t3c1m_' + str(i)]) / 100) for i in range(7, 12)]
                            defense_type_mod_2 = [(1 + int(values['t3c2m_' + str(i)]) / 100) for i in range(7, 12)]
                            if _check_is_a_number_in_range(values, to_check_ids_tab_3_b, 1, 100):
                                accuracy = int(values['t3_acc'])
                            else:
                                accuracy = 100
                                window['t3_acc'].update(value = 100)
                            if values['t3_acc_type'] == 'Рандом':
                                type_acc_random = True
                            else:
                                type_acc_random = False
                            forstatistics = []
                            ships_against = _find_1_50_overdef(team2)
                            compositions = _change_found_to_sole(ships_against)
                            for comp in compositions:
                                forstatistics.append(_simulate_straight(comp, team2, att_def_1, att_def_2, module1, module2, damage_type_mod_1, damage_type_mod_2, defense_type_mod_1, defense_type_mod_2, threshhold, type_acc_random, accuracy))
                            tab_3_results = []
                            for s_i in range(5):
                                if len(forstatistics) != 1:
                                    min_cost = forstatistics[0][0][1]
                                    index = 0
                                    for s_j in range(0, len(forstatistics)):
                                        if min_cost > forstatistics[s_j][0][1]:
                                            min_cost = forstatistics[s_j][0][1]
                                            index = s_j
                                    tab_3_results.append(forstatistics[index])
                                    forstatistics.pop(index)
                                else:
                                    tab_3_results.append(forstatistics[0])
                                    forstatistics.clear()
                            # t3c30_0, t3c30_8, t3c34_0, t3c34_8
                            # ['Корабль', 'Количество', 'Стоимость', 'Время строит. всего флота', 'Выжило', 'Потеряно', 'Стоимость', 'С. с вылетом', 'Время строит. потерянного флота', 'Урона осталось'] # length 10
                            dmg_left = []
                            for j in range(5):
                                dmg = 0
                                for i in range(5):
                                    dmg += tab_3_results[j][0][4][i][1]
                                dmg_left.append(int(dmg))
                            
                            do_popup_negative_damage = False
                            for j in range(5):
                                if dmg_left[j] == 0:
                                    temp_ships_left = tab_3_results[j][1][0]
                                    temp_sum = 0
                                    for s in range(len(temp_ships_left)):
                                        temp_sum += temp_ships_left[s]
                                    if temp_sum > 0:
                                        damage_needed = 0
                                        for s in range(len(temp_ships_left)):
                                            damage_needed += temp_ships_left[s] * listofships[s][4]
                                        dmg_left[j] = -1 * damage_needed
                                        do_popup_negative_damage = True
                            
                            if do_popup_negative_damage:
                                title = "Внимание"
                                text = "Установлено слишком низкое значение для макс бонуса преимущества\nили слишком низкая меткость.\nИз-за этого по некоторым или всем вариантам недостаточно\nурона для уничтожения целевого флота.\nВнизу будет указан отрицательный урон - сколько не хватило\nв среднем, без разделения на типы урона."
                                _error_popup_value_error(title, text)
                            
                            s_ids = []
                            for s_i in range(0, 5):
                                s_ids.append(tab_3_results[s_i][0][7])
                            #for s_i in range(0, 5):
                            #    for s_j in range(0, 5):
                            #        if tab_3_results[s_i][0][0][s_j] != 0:
                            #            s_ids.append(s_j)
                            #            break
                            names_ids = _translate_id_to_name(s_ids)
                            for i in range(5):
                                window['t3c3' + str(i) + '_0'].update(value = names_ids[i])
                                window['t3c3' + str(i) + '_1'].update(value = _separator_for_output(ships_against[s_ids[i]]))
                                window['t3c3' + str(i) + '_2'].update(value = _separator_for_output(tab_3_results[i][0][3]))
                                window['t3c3' + str(i) + '_3'].update(value = _separator_for_output(tab_3_results[i][0][6]))
                                window['t3c3' + str(i) + '_4'].update(value = _separator_for_output(tab_3_results[i][0][2][s_ids[i]]))
                                window['t3c3' + str(i) + '_5'].update(value = _separator_for_output(tab_3_results[i][0][0][s_ids[i]]))
                                window['t3c3' + str(i) + '_6'].update(value = _separator_for_output(tab_3_results[i][0][1]))
                                window['t3c3' + str(i) + '_7'].update(value = _separator_for_output(int(_my_round_threshhold_up(tab_3_results[i][0][1] + tab_3_results[i][0][3] * 0.02, 0, 0.5))))
                                window['t3c3' + str(i) + '_8'].update(value = _separator_for_output(tab_3_results[i][0][5]))
                                window['t3c3' + str(i) + '_9'].update(value = _separator_for_output(dmg_left[i]))
                                
                            for i in range(9):
                                window['t3c42_' + str(i)].update(value = _separator_for_output(tab_3_results[0][1][0][i]))
                            
                            window['t3c43_0'].update(value = _separator_for_output(tab_3_results[0][1][3]))
                            window['t3c43_1'].update(value = _separator_for_output(tab_3_results[0][1][5]))
                            #window['t3c43_2'].update(value = _separator_for_output(int(_my_round_threshhold_up(tab_3_results[0][1][1] + tab_3_results[0][1][3] * 0.02, 0, 0.5))))
                            #window['t3c43_4'].update(value = _separator_for_output(tab_3_results[0][1][5]))
                            
                            add_text = ""
                            for s_i in range(0, 9):
                                if team2[s_i] != 0:
                                    add_text += str(team2[s_i]) + " " + listofships[s_i][0] + "\n"
                            text = "\nSorted list of proposed ship counter with minimum losses in ascending order of lost ships costs:\nUsed accuracy is %s%%\nAgainst\n%sCost %s\n---------\n\n" % (accuracy, add_text, tab_3_results[0][1][3])
                            for s_i in range(0, 5):
                                #for s_j in range(0, 5):
                                #    if tab_3_results[s_i][0][0][s_j] != 0:
                                #        s_id = s_j
                                #        break
                                s_id = s_ids[s_i]
                                text += "%s %s\n%s lost ships cost\n%s\nCost with flyout energy\n%s\n\n" % (int(ships_against[s_id]), listofships[s_id][0], int(tab_3_results[s_i][0][0][s_id]), int(_my_round_up(tab_3_results[s_i][0][1])), int(_my_round_up(tab_3_results[s_i][0][1] + tab_3_results[s_i][0][3] * 0.02)))
                            _log(text)
                            print(text)
        elif event == 'Рассчитать':
            if _check_is_a_positive_number(values, to_check_ids_tab_4):
                all_buildings = []
                for i in range(len(default_buildings_defense_list)):
                    all_buildings.append(int(values['t4_buildings_' + str(i)]))
                if _check_all_buildings(all_buildings):
                    energy_flag = False # True
                    j = int(values['t4_planet_type'][1])
                    k = int(values['t4_planet_mines'][0])
                    planetary_coef = default_planetary_coefs[j][k]
                    turret_damage = 100 * planetary_coef
                    all_rockets = [0]
                    for i in range(1, 4):
                        all_rockets.append(int(values['t4_rockets_' + str(i)]))
                    mod = [1 + _my_truncate(int(values['t4_buffs_0']) / 100, 5), 1 + _my_truncate(int(values['t4_buffs_1']) / 100, 5)]
                    text = "Buffs for Valkyr: %s" % (mod)
                    _log(text)
                    print(text)
                    # Why? Because at the last moment in Closed Beta it was changed to do passive damage if there are rocket missiles present on the planet
                    if values['t4_do_passive'] == "Да":
                        do_passive = True
                    else:
                        do_passive = False
                    tab_4_results, valkyr_needed_shield_list, valkyr_dead_shield_list = _simulate_bombardment(all_buildings, all_rockets, turret_damage, threshhold, energy_flag, do_passive, mod)
                    valkyr_out_of = [valkyr_needed_shield_list, valkyr_dead_shield_list]
                    for j in range(3):
                        for i in range(6):
                            window['t4_out_' + str(j + 1) + '_' + str(i)].update(value = _separator_for_output(tab_4_results[j][i]))
                    for j in range(30):
                        window['t4_out_ss_0_' + str(30 - j)].update(value = _separator_for_output(30 - j))
                        for i in range(1, 3):
                            window['t4_out_ss_' + str(i) + '_' + str(30 - j)].update(value = _separator_for_output(valkyr_out_of[i - 1][j]))
        elif event == 'Особенности расчёта':
            title = "Особенности расчёта"
            text = "Расчёты в блоке справа о необходимом количестве Валькирий для уничтожения\nвсех уровней генератора щита за одну атаку имеют некоторую погрешность.\nОтправляйте немного больше. Используйте на свой страх и риск.\n\nРасчёты в блоке снизу используются для последовательного уничтожения уровней\nгенератора щита атаками друг за другом.\nОни достаточно точны, но всё равно стоит отправлять с небольшим запасом.\nЕсли проходит какое-то (неизвестное мне) количество времени, то происходит сброс\nнекоторых параметров в игре.\nТогда надо заново пересчитать Валькирий для текущего значения уровня щита.\n\nПример: Вы отправляли Валькирий согласно расчётам и снесли 5 уровней щита из 20.\nПосле этого Вас что-то отвлекло, прошло 5 минут (например).\nКоличество Валькирий, необходимых для сноса 15го уровня щита фактически\nв игре уже будет другим.\nНужно указать 15й уровень щита в соответствующем поле и нажать Расчитать.\n\nРасчёты по сносу ракетных башен и остальных зданий точны."
            _error_popup_value_error(title, text)
    window.close()

#-------------------------------------------------------------------------------------------------------------------
#_simulate_straight(team1, team2, att_def_1, att_def_2, module1, module2, damage_type_mod_1, damage_type_mod_2, defense_type_mod_1, defense_type_mod_2, threshhold, type_acc_random, accuracy)
#_calc_needed_ships(team2, module1, module2, damage_type_mod_1, defense_type_mod_2, accuracy)
#return [[team1_ships_dead, team1_cost_dead, team1_ships_left, team1_cost, team1_damage_left, build_time, build_time_all, s_id], [team2_ships_dead, team2_cost_dead, team2_ships_left, team2_cost, team2_damage_left, build_time, build_time_all]]
#-------------------------------------------------------------------------------------------------------------------

#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------
#             Секция калькуляции
#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------

def _my_truncate(n, decimals):
    multiplier = 10 ** decimals
    return int(n * multiplier) / multiplier

def _my_round_up(number):
    number = _my_truncate(number, 0)
    return number + 1

def _my_round_down(number):
    return math.floor(number)

def _my_round_threshhold_up(n, decimals, threshhold):
    multiplier = 10 ** decimals
    return math.floor(n*multiplier + threshhold) / multiplier

def _overwhelming(ships_list):
    totaldefense = 0
    i = 0
    for ship in ships_list:
        for j in range(10, 15):
            totaldefense += ship * listofships[i][j]
        i += 1
    return totaldefense

def _overwhelming_single_ship(ship, i):
    totaldefense = 0
    for j in range(10, 15):
        totaldefense += ship * listofships[i][j]
    return totaldefense

def _calc_mods(att_defense, def_defense, att_module, def_module):
    att_mod = []
    def_mod = []
    att_mod.append(att_module[0] * 1)
    def_mod.append(def_module[0] * 1)
    att_mod.append(att_module[1] * 1)
    def_mod.append(def_module[1] * 1)
    overbonus1 = 1
    overbonus2 = 1
    if att_defense > def_defense:
        overbonus1 = (att_defense / def_defense - 1) * thold_per + 1
    elif att_defense < def_defense:
        overbonus2 = (def_defense / att_defense - 1) * thold_per + 1
    if overbonus1 > thold_max:
        overbonus1 = thold_max
    elif overbonus2 > thold_max:
        overbonus2 = thold_max
    att_mod[1] = att_module[1] * overbonus1
    def_mod[1] = def_module[1] * overbonus2
    return att_mod, def_mod

def _prepare_for_bl(team1, team2, module1, module2):
    att_overdef = _overwhelming(team1)
    def_overdef = _overwhelming(team2)
    text = "\n\natt_overdef %s, def_overdef %s" % (att_overdef, def_overdef)
    _log(text)
    print(text)
    att_mod, def_mod = _calc_mods(att_overdef, def_overdef, module1, module2)
    text = "Att_module %s, Def_module %s" % (module1, module2)
    _log(text)
    print(text)
    text = "Att_final_mod %s, Def_final_mod %s" % (att_mod, def_mod)
    _log(text)
    print(text)
    return att_mod, def_mod

def _team_into_id_ship(team):
    list_of_ships = []
    i = 0
    for ships in team:
        if ships != 0:
            list_of_ships.append([i, ships])
        i += 1
    return list_of_ships

def _expand_list(team):
    result = []
    for i in range(0, 9):
        result.append(0)
    for i in range(0, len(team)):
        if team[i][1] != 0:
            s_id = team[i][0]
            result[s_id] = team[i][1]
    return result

def _subtract_in_list(team, alive):
    result = []
    for i in range(0, 9):
        result.append(team[i] - alive[i])
    return result

def _calc_energy_cost(ships):
    cost = 0
    for ship in ships:
        cost += ship[1] * listofships[ship[0]][9]
    return cost

def _calc_build_time(ships):
    btime = 0
    for i in range(len(listofships)):
        btime += listofships[i][15] * ships[i]
    return btime

def _find_1_50_overdef(team2):
    totaldef = _overwhelming(team2) / 5
    when_max = _my_round_threshhold_up(((thold_max_bonus / 100) / thold_per) + 1, 2, 0.5)
    team1 = []
    for i in range(0, 5):
        team1.append(int(_my_round_up(totaldef * when_max / listofships[i][4])))
    text = "find_1_50_overdef: %s" % (team1)
    _log(text)
    print(text)
    return team1

def _change_found_to_sole(ships):
    teams = []
    team = []
    for j in range(0,5):
        s_id = j
        team.clear()
        for i in range(0, 9):
            if i == s_id:
                team.append(ships[i])
            else:
                team.append(0)
        teams.append([])
        for elem in team:
            teams[j].append(elem)
    text = ""
    for team in teams:
        text += "Found team %s\n" % (team)
    _log(text)
    print(text)
    return teams

def _change_ship_to_team_list(ship, s_id):
    team = []
    for i in range(0, 9):
        if i == s_id:
            team.append(ship)
        else:
            team.append(0)
    return team

def _calc_needed_ships(team2, module1, module2, damage_type_mod_1, defense_type_mod_2, threshhold, type_acc_random, accuracy):
    total_health = []
    health = 0
    for i in range(0, 9):
        health += team2[i] * listofships[i][10] * module2[1] * defense_type_mod_2[0]
    total_health.append(health)
    health = 0
    for i in range(0, 9):
        health += team2[i] * listofships[i][11] * module2[1] * defense_type_mod_2[1]
    total_health.append(health)
    health = 0
    for i in range(0, 9):
        health += team2[i] * listofships[i][12] * module2[1] * defense_type_mod_2[2]
    total_health.append(health)
    health = 0
    for i in range(0, 9):
        health += team2[i] * listofships[i][13] * module2[1] * defense_type_mod_2[3]
    total_health.append(health)
    health = 0
    for i in range(0, 9):
        health += team2[i] * listofships[i][14] * module2[1] * defense_type_mod_2[4]
    total_health.append(health)
    for i in range(5):
        total_health[i] = _my_round_up(total_health[i] * 100 / accuracy)
    text = "total health\n%s" % (total_health)
    _log(text)
    print(text)
    needed_ships = []
    ships = total_health[2] / (listofships[0][3] * module1[0] * damage_type_mod_1[2])
    needed_ships.append(_my_round_up(ships))
    ships = total_health[0] / (listofships[1][3] * module1[0] * damage_type_mod_1[0])
    needed_ships.append(_my_round_up(ships))
    ships = total_health[1] / (listofships[2][3] * module1[0] * damage_type_mod_1[1])
    needed_ships.append(_my_round_up(ships))
    ships = total_health[3] / (listofships[3][3] * module1[0] * damage_type_mod_1[3])
    needed_ships.append(_my_round_up(ships))
    ships = total_health[4] / (listofships[4][3] * module1[0] * damage_type_mod_1[4])
    needed_ships.append(int(_my_round_up(ships)))
    text = "Basic number of needed ships:\n"
    for i in range(5):
        text += "%s %s\n" % (needed_ships[i], listofships[i][0])
    _log(text)
    print(text)
    
    team2_overdef = _overwhelming(team2)
    sim_team1_damage_left = []
    for i in range(0,5):
        team1_overdef = _overwhelming_single_ship(needed_ships[i], i)
        t1_mod, t2_mod = _calc_mods(team1_overdef, team2_overdef, module1, module2)
        needed_ships[i] = int(_my_round_up(needed_ships[i] * t2_mod[1]))
        if needed_ships[i] < 1:
            needed_ships[i] = 1
        send_to_func = _change_ship_to_team_list(needed_ships[i], i)
        print("%s %s to simulation" % (needed_ships[i], listofships[i][0]))
        sim_team1_damage_left.append(_simulate_simple(send_to_func, team2, True, module1, module2, damage_type_mod_1, defense_type_mod_2, threshhold, type_acc_random, accuracy))
    
    text = "First search for needed ships and damages left:\n"
    for i in range(5):
        text += "%s %s\n%s damage left\n" % (needed_ships[i], listofships[i][0], sim_team1_damage_left[i])
    _log(text)
    print(text)
    
    for i in range(5):
        text = "While loop for ship %s" % (listofships[i][0])
        _log(text)
        print(text)
        j = 0
        while True:
            """
            if i == 4:
                max_dmg = 900
            elif i == 0:
                max_dmg = 50
            elif i == 1:
                max_dmg = 140
            elif i == 2:
                max_dmg = 200
            elif i == 3:
                max_dmg = 300
            else:
                max_dmg = 500
            """
            """
            if i == 0:
                max_dmg = 25
            elif i == 1:
                max_dmg = 70
            elif i == 2:
                max_dmg = 100
            elif i == 3:
                max_dmg = 150
            elif i == 4:
                max_dmg = 450
            """
            max_dmg = listofships[i][3]
            if sim_team1_damage_left[i] <= max_dmg and sim_team1_damage_left[i] >=0:
                break
            if sim_team1_damage_left[i] > max_dmg:
                if sim_team1_damage_left[i] - max_dmg > listofships[i][3] * 10:
                    damage_delta = sim_team1_damage_left[i] - max_dmg
                    ship_delta = int(_my_round_threshhold_up(damage_delta / listofships[i][3] * 0.9, 0, 0.5))
                    needed_ships[i] -= ship_delta
                    if needed_ships[i] == 0:
                        needed_ships[i] = 1
                        break
                else:
                    needed_ships[i] -= 1
            elif sim_team1_damage_left[i] < 0:
                if -1 * sim_team1_damage_left[i] > listofships[i][3] * 10:
                    damage_delta = sim_team1_damage_left[i]
                    ship_delta = int(_my_round_threshhold_up(damage_delta / listofships[i][3] * 0.9, 0, 0.5))
                    needed_ships[i] -= ship_delta
                else:
                    needed_ships[i] += 1
            
            """
            if sim_team1_damage_left[i] > max_dmg:
                damage_delta = sim_team1_damage_left[i] - max_dmg
                ship_delta = int(_my_round_threshhold_up(damage_delta / listofships[i][3] * 0.9, 0, 0.5))
                needed_ships[i] -= ship_delta
            elif sim_team1_damage_left[i] < 0:
                if j != 4:
                    damage_delta = sim_team1_damage_left[i]
                    ship_delta = int(_my_round_threshhold_up(damage_delta / listofships[i][3] * 0.9, 0, 0.5))
                    needed_ships[i] -= ship_delta
                else:
                    if sim_team1_damage_left[i] <0 and sim_team1_damage_left[i] > -450:
                        needed_ships[i] += 1
            """
            team1_overdef = _overwhelming_single_ship(needed_ships[i], i)
            #t1_mod, t2_mod = _calc_mods(team1_overdef, team2_overdef, module1, module2)
            send_to_func = _change_ship_to_team_list(needed_ships[i], i)
            print("%s %s to simulation" % (needed_ships[i], listofships[i][0]))
            sim_team1_damage_left[i] = _simulate_simple(send_to_func, team2, True, module1, module2, damage_type_mod_1, defense_type_mod_2, threshhold, type_acc_random, accuracy)
            text = "Iteration №%s\n%s %s\n%s damage left\n\n" % (j, needed_ships[i], listofships[i][0], sim_team1_damage_left[i])
            _log(text)
            print(text)
            j += 1
            if j >= 20:
                break
    
    
    return needed_ships, sim_team1_damage_left

def _calc_damage_by_types_straight(type_acc_random, accuracy, ships, ships_mod, damage_type_mod):
    if type_acc_random and accuracy != 100:
        acc_list = [(random.randrange(accuracy, 100) / 100) for i in range(9)]
    else:
        acc_list = [(accuracy / 100) for i in range(9)]
    
    damage_laser = (ships[1] * listofships[1][3] * acc_list[1] + ships[6] * listofships[6][3] * acc_list[6]) * ships_mod[0] * damage_type_mod[0]
    damage_kinetic = (ships[2] * listofships[2][3] * acc_list[2] + ships[5] * listofships[5][3] * acc_list[5]) * ships_mod[0] * damage_type_mod[1]
    damage_plasma = (ships[0] * listofships[0][3] * acc_list[0]) * ships_mod[0] * damage_type_mod[2]
    damage_rocket = (ships[3] * listofships[3][3] * acc_list[3] + ships[7] * listofships[7][3] * acc_list[7]) * ships_mod[0] * damage_type_mod[3]
    damage_rail = (ships[4] * listofships[4][3] * acc_list[4] + ships[8] * listofships[8][3] * acc_list[8]) * ships_mod[0] * damage_type_mod[4]
    
    return [[0, damage_laser], [1, damage_kinetic], [2, damage_plasma], [3, damage_rocket], [4, damage_rail]]

def _deal_damage_and_return_stuff(damages, defenses, mod, defense_type_mod, ships, s_id, threshhold):
    text = "Deal Damage mod is %s" % (mod)
    _log(text)
    print(text)
    ships_left = ships
    for i in range(0, len(defenses)):
        text ="Нанесение урона. Итерация %s" % (i) 
        _log(text)
        print(text)
        if damages[i][1] != 0:
            health = float(ships_left * defenses[i][1] * mod * defense_type_mod[i])
            text = "health %s" % (health)
            _log(text)
            print(text)
            text = "damage %s" % (damages[i][1])
            _log(text)
            print(text)
            #ships_left = ships
            if health - damages[i][1] <= 0:
                ships_left = 0
                damages[i][1] -= health
                damages[i][1] = _my_round_threshhold_up(damages[i][1], 7, 0.5)
                #damages[i][1] = float(int(damages[i][1]))
                text = "Damage id %s left %s" % (default_damage_names_id[damages[i][0]], damages[i][1])
                _log(text)
                print(text)
                text = "Ships id %s left %s" % (listofships[s_id][0], ships_left)
                _log(text)
                print(text)
                break
            else:
                health -= damages[i][1]
                ships_left = health / (defenses[i][1] * mod * defense_type_mod[i])
                damages[i][1] = 0
        text = "Damage id %s left %s" % (default_damage_names_id[damages[i][0]], damages[i][1])
        _log(text)
        print(text)
        text = "Ships id %s left %s" % (listofships[s_id][0], ships_left)
        _log(text)
        print(text)
    #ships_left = int(_my_round_threshhold_up(ships_left, 0, threshhold))
    ships_left = _my_round_threshhold_up(ships_left, 7, 0.5)
    return damages, ships_left

def _battle_logic_straight_damage(team2, damage1, mod2, defense_type_mod, state_att_def, threshhold):
    text = "Battle Logic Straight mod is %s" % (mod2)
    _log(text)
    print(text)
    flag_ships = False
    flag_damage = False
    do_again = False
    text = "\nDamage %s \n vs \nships %s" % (damage1, team2)
    _log(text)
    print(text)
    list_of_priorities = []
    i = 0
    for ships in team2:
        h = ships[0]
        if state_att_def:
            list_of_priorities.append(listofships[h][6])
        else:
            list_of_priorities.append(listofships[h][7])
        i += 1
    priorities_sum = 0
    for elem in list_of_priorities:
        priorities_sum += elem
    list_of_pri_percent = []
    
    i = 0
    sum_of_prior_mult_ship = 0
    each_ship_prior_mult_ship = []
    for ships in team2:
        toadd = ships[1] * list_of_priorities[i]
        sum_of_prior_mult_ship += toadd
        each_ship_prior_mult_ship.append(toadd)
        i += 1
    for elem in each_ship_prior_mult_ship:
        list_of_pri_percent.append(_my_round_threshhold_up(elem / sum_of_prior_mult_ship, 7, 0.5))
    text = "list_of_priorities_percent %s" % (list_of_pri_percent)
    _log(text)
    print(text)
    
    list_of_dam_per_ship_type = []
    list_of_list_dam_per_ship = []
    i = 0
    for j in range(0, len(team2)):
        list_of_dam_per_ship_type = []
        for elem in damage1:
            list_of_dam_per_ship_type.append([elem[0], _my_round_threshhold_up(list_of_pri_percent[j] * elem[1], 4, 0.5)])
            i += 1
        list_of_list_dam_per_ship.append(list_of_dam_per_ship_type)
    text = "list_of_dam_per_ship_type:"
    _log(text)
    print(text)
    for elem in list_of_list_dam_per_ship:
        text = str(elem)
        _log(text)
        print(text)
    text = "\n\n"
    _log(text)
    print(text)
    
    for j in range(0, len(team2)):
        text = "Battle Logic Iteration № %s" % (j)
        _log(text)
        print(text)
        start_ships = team2[j][1]
        i = team2[j][0]
        def_defenses = [[k, listofships[i][k + 10]] for k in range(5)]
        """
        def_defenses = []
        def_defenses.append([0, listofships[i].defense_laser])
        def_defenses.append([1, listofships[i].defense_kinetic])
        def_defenses.append([2, listofships[i].defense_plasma])
        def_defenses.append([3, listofships[i].defense_rocket])
        def_defenses.append([4, listofships[i].defense_rail])
        """
        text = "defense_type_mod %s" % (defense_type_mod)
        _log(text)
        print(text)
        text = "dam_per_ship element %s" % (list_of_list_dam_per_ship[j])
        _log(text)
        print(text)
        text = "def_defenses %s" % (def_defenses)
        _log(text)
        print(text)
        list_of_list_dam_per_ship[j], ships_left = _deal_damage_and_return_stuff(list_of_list_dam_per_ship[j], def_defenses, mod2[1], defense_type_mod, team2[j][1], i, threshhold)
        text = "Damage left %s" % (list_of_list_dam_per_ship[j])
        _log(text)
        print(text)
        text = "Ships left %s" % (ships_left)
        _log(text)
        print(text)
        if ships_left > 0:
            text = "ships alive and no damage left"
            _log(text)
            print(text)
            team2[j] = [i, ships_left]
        else:
            text = "All (%s) ships id %s destroyed" % (start_ships, listofships[i][0])
            _log(text)
            print(text)
            text = "Damage left %s" % (list_of_list_dam_per_ship[j])
            _log(text)
            print(text)
            team2[j] = [i, 0]
        text = "ships left %s" % (team2)
        _log(text)
        print(text)
    
    damage1.clear()
    for k in range(0, 5):
        summ = 0
        for h in range(len(list_of_list_dam_per_ship)):
            summ += list_of_list_dam_per_ship[h][k][1]
        if summ != 0:
            flag_damage = True
        damage1.append([k, summ])
    text = "sum of leftover damages %s" % (damage1)
    _log(text)
    print(text)
    
    for ships in team2:
        if ships[1] != 0:
            flag_ships = True
            break
    
    if flag_ships:
        if flag_damage:
            do_again = True
        else:
            do_again = False
    
    if do_again:
        new = []
        for ships in team2:
            new.append(ships)
        team2.clear()
        for ships in new:
            if ships[1] != 0:
                team2.append(ships)
    
    if do_again:
        text = "\n\nSome damage left, ships left: %s. Do battle logic again\n\n" % (team2)
        _log(text)
        print(text)
        team2, damage1 = _battle_logic_straight_damage(team2, damage1, mod2, defense_type_mod, state_att_def, threshhold)
    
    return team2, damage1

def _simulate_straight(team1, team2, att_def_1, att_def_2, module1, module2, damage_type_mod_1, damage_type_mod_2, defense_type_mod_1, defense_type_mod_2, threshhold, type_acc_random, accuracy):
    # prepare
    mod1, mod2 = _prepare_for_bl(team1, team2, module1, module2)
    text = "Mod for specific damage type:\nTeam1 %s\nTeam2 %s" %(damage_type_mod_1, damage_type_mod_2)
    _log(text)
    print(text)
    text = "Defense mod against specific damage type:\nTeam1 %s\nTeam2 %s" %(defense_type_mod_1, defense_type_mod_2)
    _log(text)
    print(text)
    team1_damages = _calc_damage_by_types_straight(type_acc_random, accuracy, team1, mod1, damage_type_mod_1)
    team2_damages = _calc_damage_by_types_straight(type_acc_random, accuracy, team2, mod2, damage_type_mod_2)
    team1_comp = _team_into_id_ship(team1)
    team2_comp = _team_into_id_ship(team2)
    
    for i in range(len(team1_comp)):
        if team1_comp[i][1] != 0:
            s_id = team1_comp[i][0]
            break
    
    # battle logic team1 vs team2
    team2_ships_left, team1_damage_left = _battle_logic_straight_damage(team2_comp, team1_damages, mod2, defense_type_mod_2, att_def_2, threshhold)
    # battle logic team2 vs team1
    team1_ships_left, team2_damage_left = _battle_logic_straight_damage(team1_comp, team2_damages, mod1, defense_type_mod_1, att_def_1, threshhold)
    
    team2_ships_left = _expand_list(team2_ships_left)
    team1_ships_left = _expand_list(team1_ships_left)

    team2_ships_dead = _subtract_in_list(team2, team2_ships_left)
    team1_ships_dead = _subtract_in_list(team1, team1_ships_left)
    
    for i in range(len(team1_ships_left)):
        team1_ships_dead[i] = int(_my_round_threshhold_up(team1_ships_dead[i], 0, threshhold))
    
    for i in range(len(team2_ships_left)):
        team2_ships_dead[i] = int(_my_round_threshhold_up(team2_ships_dead[i], 0, threshhold))
    
    team2_ships_left = _subtract_in_list(team2, team2_ships_dead)
    team1_ships_left = _subtract_in_list(team1, team1_ships_dead)

    team1_comp = _team_into_id_ship(team1)
    team2_comp = _team_into_id_ship(team2)

    team1_cost = _calc_energy_cost(team1_comp)
    for_cost_1 = _team_into_id_ship(team1_ships_dead)
    team1_cost_dead = _calc_energy_cost(for_cost_1)

    team2_cost = _calc_energy_cost(team2_comp)
    for_cost_2 = _team_into_id_ship(team2_ships_dead)
    team2_cost_dead = _calc_energy_cost(for_cost_2)

    text = "\n\n%s\n%s\n\nTeam1:\nStarting\n%s\nEnergy cost\n%s\nDestroyed\n%s\nEnergy cost\n%s + %s = %s\nAlive\n%s\n\nTeam2:\nStarting\n%s\nEnergy cost\n%s\nDestroyed\n%s\nEnergy cost\n%s + %s = %s\nAlive\n%s\n\nTeam1 Damage left\n%s\nTeam2 Damage left\n%s\n\n" % (mod1, mod2, team1, team1_cost, team1_ships_dead, team1_cost_dead, _my_round_threshhold_up(team1_cost * 0.02, 0, 0.5), _my_round_threshhold_up(team1_cost_dead + team1_cost * 0.02, 0, 0.5), team1_ships_left, team2, team2_cost, team2_ships_dead, team2_cost_dead, _my_round_threshhold_up(team1_cost * 0.02, 0, 0.5), _my_round_threshhold_up(team2_cost_dead + team2_cost * 0.02, 0, 0.5), team2_ships_left, team1_damage_left, team2_damage_left)
    _log(text)
    print(text)
    print("return simulate id %s" % (s_id))
    return [[team1_ships_dead, team1_cost_dead, team1_ships_left, team1_cost, team1_damage_left, _calc_build_time(team1_ships_dead), _calc_build_time(team1), s_id], [team2_ships_dead, team2_cost_dead, team2_ships_left, team2_cost, team2_damage_left, _calc_build_time(team2_ships_dead), _calc_build_time(team2)]]

def _deal_damage_simple(damages, defenses, mod, defense_type_mod, ships, s_id, threshhold):
    text = "Deal Damage Simple mod is %s" % (mod)
    _log(text)
    print(text)
    ships_left = ships
    for i in range(0, len(defenses)):
        text ="Нанесение урона. Итерация %s" % (i) 
        _log(text)
        print(text)
        left_over = 0
        if damages[i][1] != 0:
            health = float(ships_left * defenses[i][1] * mod * defense_type_mod[i])
            text = "health %s" % (health)
            _log(text)
            print(text)
            text = "damage %s" % (damages[i][1])
            _log(text)
            print(text)
            #ships_left = ships
            if health - damages[i][1] <= 0:
                ships_left = 0
                damages[i][1] -= health
                damages[i][1] = _my_round_threshhold_up(damages[i][1], 7, 0.5)
                #damages[i][1] = float(int(damages[i][1]))
                text = "Damage id %s left %s" % (default_damage_names_id[damages[i][0]], damages[i][1])
                _log(text)
                print(text)
                text = "Ships id %s left %s" % (listofships[s_id][0], ships_left)
                _log(text)
                print(text)
                break
            else:
                health -= damages[i][1]
                ships_left = health / (defenses[i][1] * mod * defense_type_mod[i])
                damages[i][1] = 0
                left_over = -1 * health
        text = "Damage id %s left %s" % (default_damage_names_id[damages[i][0]], damages[i][1])
        _log(text)
        print(text)
        text = "Ships id %s left %s" % (listofships[s_id][0], ships_left)
        _log(text)
        print(text)
    #ships_left = int(_my_round_threshhold_up(ships_left, 0, threshhold))
    ships_left = _my_round_threshhold_up(ships_left, 7, 0.5)
    return damages, ships_left, left_over

def _battle_logic_simple(team2, damage1, mod2, defense_type_mod, state_att_def, threshhold):
    text = "Battle Logic Simple mod is %s" % (mod2)
    _log(text)
    print(text)
    flag_ships = False
    flag_damage = False
    do_again = False
    text = "\nDamage %s \n vs \nships %s" % (damage1, team2)
    _log(text)
    print(text)
    list_of_priorities = []
    i = 0
    for ships in team2:
        h = ships[0]
        if state_att_def:
            list_of_priorities.append(listofships[h][6])
        else:
            list_of_priorities.append(listofships[h][7])
        i += 1
    priorities_sum = 0
    for elem in list_of_priorities:
        priorities_sum += elem
    list_of_pri_percent = []
    
    i = 0
    sum_of_prior_mult_ship = 0
    each_ship_prior_mult_ship = []
    for ships in team2:
        toadd = ships[1] * list_of_priorities[i]
        sum_of_prior_mult_ship += toadd
        each_ship_prior_mult_ship.append(toadd)
        i += 1
    for elem in each_ship_prior_mult_ship:
        list_of_pri_percent.append(_my_round_threshhold_up(elem / sum_of_prior_mult_ship, 7, 0.5))
    text = "list_of_priorities_percent %s" % (list_of_pri_percent)
    _log(text)
    print(text)
    
    list_of_dam_per_ship_type = []
    list_of_list_dam_per_ship = []
    i = 0
    for j in range(0, len(team2)):
        list_of_dam_per_ship_type = []
        for elem in damage1:
            list_of_dam_per_ship_type.append([elem[0], _my_round_threshhold_up(list_of_pri_percent[j] * elem[1], 4, 0.5)])
            i += 1
        list_of_list_dam_per_ship.append(list_of_dam_per_ship_type)
    text = "list_of_dam_per_ship_type:"
    _log(text)
    print(text)
    for elem in list_of_list_dam_per_ship:
        text = str(elem)
        _log(text)
        print(text)
    text = "\n\n"
    _log(text)
    print(text)
    
    for j in range(0, len(team2)):
        text = "Battle Simple Logic Iteration № %s" % (j)
        _log(text)
        print(text)
        start_ships = team2[j][1]
        i = team2[j][0]
        def_defenses = [[k, listofships[i][k + 10]] for k in range(5)]
        text = "defense_type_mod %s" % (defense_type_mod)
        _log(text)
        print(text)
        text = "dam_per_ship element %s" % (list_of_list_dam_per_ship[j])
        _log(text)
        print(text)
        text = "def_defenses %s" % (def_defenses)
        _log(text)
        print(text)
        list_of_list_dam_per_ship[j], ships_left, left_over = _deal_damage_simple(list_of_list_dam_per_ship[j], def_defenses, mod2[1], defense_type_mod, team2[j][1], i, threshhold)
        text = "Damage left %s" % (list_of_list_dam_per_ship[j])
        _log(text)
        print(text)
        text = "Ships left %s" % (ships_left)
        _log(text)
        print(text)
        if ships_left > 0:
            text = "ships alive and no damage left"
            _log(text)
            print(text)
            team2[j] = [i, ships_left]
        else:
            text = "All (%s) ships id %s destroyed" % (start_ships, listofships[i][0])
            _log(text)
            print(text)
            text = "Damage left %s" % (list_of_list_dam_per_ship[j])
            _log(text)
            print(text)
            team2[j] = [i, 0]
        text = "ships left %s" % (team2)
        _log(text)
        print(text)
    
    damage1.clear()
    for k in range(0, 5):
        summ = 0
        for h in range(len(list_of_list_dam_per_ship)):
            summ += list_of_list_dam_per_ship[h][k][1]
        if summ > 0:
            flag_damage = True
        damage1.append([k, summ])
    text = "sum of leftover damages %s" % (damage1)
    _log(text)
    print(text)
    
    for ships in team2:
        if ships[1] != 0:
            flag_ships = True
            break
    
    if flag_ships:
        if flag_damage:
            do_again = True
        else:
            do_again = False
    
    if do_again:
        new = []
        for ships in team2:
            new.append(ships)
        team2.clear()
        for ships in new:
            if ships[1] != 0:
                team2.append(ships)
    
    if do_again:
        left_over = 0
        text = "\n\nSome damage left, ships left: %s. Do battle logic again\n\n" % (team2)
        _log(text)
        print(text)
        team2, damage1, left_over = _battle_logic_simple(team2, damage1, mod2, defense_type_mod, state_att_def, threshhold)
    
    return team2, damage1, left_over

def _simulate_simple(team1, team2, att_def_2, module1, module2, damage_type_mod_1, defense_type_mod_2, threshhold, type_acc_random, accuracy):
    # prepare
    t1_mod, t2_mod = _prepare_for_bl(team1, team2, module1, module2)
    text = "Mod for specific damage type:\nTeam1 %s" %(damage_type_mod_1)
    _log(text)
    print(text)
    text = "Defense mod against specific damage type:\nTeam2 %s" %(defense_type_mod_2)
    _log(text)
    print(text)
    team1_damages = _calc_damage_by_types_straight(type_acc_random, accuracy, team1, t1_mod, damage_type_mod_1)
    team1_comp = _team_into_id_ship(team1)
    team2_comp = _team_into_id_ship(team2)

    # battle logic team1 vs team2
    team2_ships_left, team1_damage_left, left_over = _battle_logic_simple(team2_comp, team1_damages, t2_mod, defense_type_mod_2, att_def_2, threshhold)
    
    for i in range(len(team2_ships_left)):
        team2_ships_left[i][1] = int(_my_round_threshhold_up(team2_ships_left[i][1], 0, threshhold))
    
    damage_left = 0
    for i in range(5):
        damage_left += team1_damage_left[i][1]
    
    if left_over == 0:
        to_return = damage_left
    else:
        to_return = left_over
    
    text = "\n_simulate_\nDamage left\n%s\n" % (to_return)
    _log(text)
    print(text)
    return to_return

def _deal_damage_with_rockets_bombardment(all_rockets, turret_damage, turret_level, threshhold, mod):
    text = "Deal Damage with Rockets Bombardment mod is %s" % (mod)
    _log(text)
    print(text)
    rocket_damage = 0
    rail_damage = 0
    for i in range(len(all_rockets)):
        rocket_damage += all_rockets[i] * default_missiles_list[i][1] * default_missiles_list[i][2]
    rail_damage = turret_damage * turret_level
    text = "rocket damage %s, passive damage %s" % (rocket_damage, rail_damage)
    _log(text)
    print(text)
    valkyr_dead_1 = int(_my_round_threshhold_up(rocket_damage / (listofships[7][13] * mod[1]), 0, threshhold))
    valkyr_dead_2 = int(_my_round_threshhold_up(rail_damage / (listofships[7][14] * mod[1]), 0, threshhold))
    text = "Valkyr dead from rockets %s, from passive %s" % (valkyr_dead_1, valkyr_dead_2)
    _log(text)
    print(text)
    return valkyr_dead_1, valkyr_dead_2

def _calc_valkyr_for_shield(all_defenses, shield_level, threshhold, energy_flag, valkyr_dead_passive, valkyr_dead_from_rockets, mod, do_passive):
    text = "Calc Valkyr for Shield mod is %s" % (mod)
    _log(text)
    print(text)
    if energy_flag:
        shield_max_coef = 1
    else:
        shield_max_coef = 0.5
    shield_coef_change = shield_max_coef / shield_level
    damage_to_do = []
    valkyr_needed = []
    valkyr_dead = []
    valkyr_dead_for_test = []
    valkyr_needed_sum = 0
    valkyr_dead_sum = 0
    valkyr_dead_for_test_sum = 0
    j = 30 - shield_level
    for i in range(j):
        valkyr_needed.append(0)
        valkyr_dead.append(0)
        valkyr_dead_for_test.append(0)
    shield_lvl_now = shield_level
    for i in range(shield_level):
        #shield_coef = shield_coef_30 - (30 - shield_lvl_now) * shield_coef_change
        #shield_coef = _my_round_threshhold_up(shield_max_coef - shield_coef_change * (shield_level - shield_lvl_now), 3, threshhold)
        shield_coef = shield_max_coef - shield_coef_change * (shield_level - shield_lvl_now)
        print("shield coef: %s\n" % (shield_coef))
        # #backtrackerror # if something goes wrong, check this one line:
        dmg_to_do = _my_round_threshhold_up(_my_truncate((all_defenses * shield_coef + shield_lvl_now * default_buildings_defense_list[9][1] * shield_max_coef), 6), 0, 0.9)
        damage_to_do.append(dmg_to_do)
        valkyr_cycle_flat = damage_to_do[i] / (listofships[7][3] * mod[0])
        if valkyr_cycle_flat > 0 and valkyr_cycle_flat < 1:
            valkyr_cycle = 1
        elif valkyr_cycle_flat >= 1:
            if valkyr_cycle_flat % int(valkyr_cycle_flat) == 0:
                valkyr_cycle = int(valkyr_cycle_flat)
            else:
                valkyr_cycle = int(_my_round_up(valkyr_cycle_flat))
        valkyr_needed.append(valkyr_cycle)
        valkyr_dead.append(int(_my_round_threshhold_up(damage_to_do[i] / (listofships[7][10] * mod[1]), 0, threshhold)))
        valkyr_dead_for_test.append(int(_my_round_threshhold_up(damage_to_do[i] / (listofships[7][10]), 0, threshhold)))
        valkyr_needed_sum += valkyr_cycle
        valkyr_dead_sum += valkyr_dead[i + j]
        valkyr_dead_for_test_sum += valkyr_dead_for_test[i + j]
        shield_lvl_now -= 1
    
    # old way
    #valkyr_needed_final = valkyr_needed_sum + valkyr_dead_from_turrets
    #if valkyr_dead_from_rockets == 0:
    #    valkyr_needed_final = valkyr_needed_sum + valkyr_dead_passive + valkyr_dead_sum
    #    valkyr_dead_sum += valkyr_dead_passive
    #else:
    #    valkyr_needed_final = valkyr_needed_sum + valkyr_dead_from_rockets + valkyr_dead_sum
    #    valkyr_dead_sum += valkyr_dead_from_rockets
    
    # switching to test results
    valkyr_needed_final = int(_my_round_up(valkyr_dead_sum * listofships[7][10] * mod[1] / (listofships[7][3] * mod[0])))
    text = "Test Valkyr number with mod defense without turret and rocket lossess for reference: %s" % (valkyr_needed_final)
    _log(text)
    print(text)
    valkyr_needed_final = int(_my_round_up(valkyr_dead_for_test_sum * listofships[7][10] / (listofships[7][3] * mod[0])))
    text = "Test Final(?) Valkyr number without mod defense without turret and rocket lossess: %s" % (valkyr_needed_final)
    _log(text)
    print(text)
    
    if valkyr_dead_from_rockets == 0:
        valkyr_dead_sum += valkyr_dead_passive
        valkyr_needed_final += valkyr_dead_passive
    else:
        if do_passive:
            valkyr_dead_sum += valkyr_dead_from_rockets + valkyr_dead_passive
            valkyr_needed_final += valkyr_dead_from_rockets + valkyr_dead_passive
        else:
            valkyr_dead_sum += valkyr_dead_from_rockets
            valkyr_needed_final += valkyr_dead_from_rockets
    
    text = "\n"
    shield_lvl_now = shield_level
    for i in range(shield_level):
        if i != 0:
            valkyr_dead[i + j] += valkyr_dead_passive
            valkyr_needed[i + j] += valkyr_dead_passive
        else:
            if valkyr_dead_from_rockets == 0:
                valkyr_dead[i + j] += valkyr_dead_passive
                valkyr_needed[i + j] += valkyr_dead_passive
            else:
                if do_passive:
                    valkyr_dead[i + j] += valkyr_dead_from_rockets + valkyr_dead_passive
                    valkyr_needed[i + j] += valkyr_dead_from_rockets + valkyr_dead_passive
                else:
                    valkyr_dead[i + j] += valkyr_dead_from_rockets
                    valkyr_needed[i + j] += valkyr_dead_from_rockets
        text += 'Shield level %s\nDamage needed %s\nValkyr needed %s\nValkyr will die %s\n' % (shield_lvl_now, damage_to_do[i], valkyr_needed[i + j], valkyr_dead[i + j])
        shield_lvl_now -= 1
    text += '\n'
    _log(text)
    print(text)
    
    return valkyr_needed_final, valkyr_dead_sum, valkyr_needed, valkyr_dead

def _simulate_bombardment(all_buildings, all_rockets, turret_damage, threshhold, energy_flag, do_passive, mod):
    turret_level = all_buildings[8]
    shield_defenses = all_buildings[9] * default_buildings_defense_list[9][1]
    turret_defenses = all_buildings[8] * default_buildings_defense_list[8][1]
    building_defenses = 0
    for i in range(len(all_buildings)):
        if i != 8 and i != 9:
            building_defenses += all_buildings[i] * default_buildings_defense_list[i][1]
    text = "List of defenses:\nShield generator %s\nRocket turrets %s\nThe rest of the buildings %s" % (shield_defenses, turret_defenses, building_defenses)
    _log(text)
    print(text)
    
    valkyr_dead_from_rockets, valkyr_dead_passive = _deal_damage_with_rockets_bombardment(all_rockets, turret_damage, turret_level, threshhold, mod)
    valkyr_dead_from_turrets = valkyr_dead_passive
    if (all_rockets[1] != 0 or all_rockets[2] != 0 or all_rockets[3] != 0) and all_buildings[9] == 0:
        if do_passive:
            valkyr_dead_from_turrets = valkyr_dead_from_rockets + valkyr_dead_passive
        else:
            valkyr_dead_from_turrets = valkyr_dead_from_rockets
    valkyr_needed_for_turrets_flat = turret_defenses / (listofships[7][3] * mod[0])
    
    if int(valkyr_needed_for_turrets_flat) == 0:
        valkyr_needed_for_turrets = 0
        valkyr_needed_for_turrets_flat = 0
    else:
        if valkyr_needed_for_turrets_flat % int(valkyr_needed_for_turrets_flat) == 0:
            valkyr_needed_for_turrets = int(valkyr_needed_for_turrets_flat) + valkyr_dead_from_turrets
        else:
            valkyr_needed_for_turrets = int(_my_round_up(valkyr_needed_for_turrets_flat)) + valkyr_dead_from_turrets
    
    if shield_defenses != 0:
        valkyr_needed_for_shield, valkyr_dead_from_shield, valkyr_needed_shield_list, valkyr_dead_shield_list = _calc_valkyr_for_shield(building_defenses + turret_defenses, all_buildings[9], threshhold, energy_flag, valkyr_dead_passive, valkyr_dead_from_rockets, mod, do_passive)
    else:
        valkyr_needed_for_shield = 0
        valkyr_dead_from_shield = 0
        valkyr_needed_shield_list = []
        valkyr_dead_shield_list = []
        for i in range(30):
            valkyr_needed_shield_list.append(0)
            valkyr_dead_shield_list.append(0)
    text = "Valkyr needed for shield generator: %s" % (valkyr_needed_for_shield)
    _log(text)
    print(text)
    
    text = "Valkyr needed for turrets flat: %s and result %s" % (valkyr_needed_for_turrets_flat, valkyr_needed_for_turrets)
    _log(text)
    print(text)
    
    valkyr_needed_for_buildings_flat = building_defenses / (listofships[7][3] * mod[0])
    if int(valkyr_needed_for_buildings_flat) == 0:
        valkyr_needed_for_buildings = 0
        valkyr_needed_for_buildings_flat = 0
    else:
        if valkyr_needed_for_buildings_flat % int(valkyr_needed_for_buildings_flat) == 0:
            valkyr_needed_for_buildings = int(valkyr_needed_for_buildings_flat)
        else:
            valkyr_needed_for_buildings = int(_my_round_up(valkyr_needed_for_buildings_flat))
    text = "Valkyr needed for the rest of the buildings flat: %s and result %s" % (valkyr_needed_for_buildings_flat, valkyr_needed_for_buildings)
    _log(text)
    print(text)
    
    return [[valkyr_needed_for_shield, valkyr_needed_for_shield * listofships[7][9], valkyr_needed_for_shield * listofships[7][15], valkyr_dead_from_shield, valkyr_dead_from_shield * listofships[7][9], valkyr_dead_from_shield * listofships[7][15]], [valkyr_needed_for_turrets, valkyr_needed_for_turrets * listofships[7][9], valkyr_needed_for_turrets * listofships[7][15], valkyr_dead_from_turrets, valkyr_dead_from_turrets * listofships[7][9], valkyr_dead_from_turrets * listofships[7][15]], [valkyr_needed_for_buildings, valkyr_needed_for_buildings * listofships[7][9], valkyr_needed_for_buildings * listofships[7][15], 0, 0, 0]], valkyr_needed_shield_list, valkyr_dead_shield_list 

def _simulate_turret_damage(team1, module1, turret_sum_damage, defense_type_mod_1, threshhold):
    text = "Simulate Turret mod is %s" % (module1)
    _log(text)
    print(text)
    # prepare
    mod1 = [1.0, module1[1]]
    text = "Defense mod against specific damage type:\n%s" %(defense_type_mod_1)
    _log(text)
    print(text)
    team1_comp = _team_into_id_ship(team1)
    team2_damages = [[0, 0], [1, 0], [2, 0], [3, 0], [4, turret_sum_damage]]
    
    # battle logic turrets vs team1
    team1_ships_left, team2_damage_left = _battle_logic_straight_damage(team1_comp, team2_damages, mod1, defense_type_mod_1, True, threshhold)
    
    team1_ships_left = _expand_list(team1_ships_left)
    team1_ships_dead = _subtract_in_list(team1, team1_ships_left)
    
    for i in range(len(team1_ships_left)):
        team1_ships_dead[i] = int(_my_round_threshhold_up(team1_ships_dead[i], 0, threshhold))
    
    team1_ships_left = _subtract_in_list(team1, team1_ships_dead)
    
    #team1_comp = _team_into_id_ship(team1)

    team1_cost = _calc_energy_cost(team1_comp)
    for_cost_1 = _team_into_id_ship(team1_ships_dead)
    team1_cost_dead = _calc_energy_cost(for_cost_1)

    text = "\n\n%s\n\nTurrets vs Team:\nStarting\n%s\nEnergy cost\n%s\nDestroyed\n%s\nEnergy cost\n%s + %s = %s\nAlive\n%s\nTurret Damage left\n%s\n\n" % (mod1, team1, team1_cost, team1_ships_dead, team1_cost_dead, _my_round_threshhold_up(team1_cost * 0.02, 0, 0.5), _my_round_threshhold_up(team1_cost_dead + team1_cost * 0.02, 0, 0.5), team1_ships_left, team2_damage_left)
    _log(text)
    print(text)
    return [team1_ships_dead, team1_cost_dead, team1_ships_left, team1_cost, team2_damage_left, _calc_build_time(team1_ships_dead), _calc_build_time(team1)]

def _battle_logic_rockets_damage(team1, all_rockets, r_id, mod1, defense_type_mod, state_att_def, threshhold):
    flag_ships = False
    flag_damage = False
    do_again = False
    text = "\n%s missileheads %s \n vs \nships %s" % (default_missiles_list[r_id][0], all_rockets, team1)
    _log(text)
    print(text)
    list_of_priorities = []
    i = 0
    for ships in team1:
        h = ships[0]
        if state_att_def:
            list_of_priorities.append(listofships[h][6])
        else:
            list_of_priorities.append(listofships[h][7])
        i += 1
    list_of_pri_percent = []
    
    i = 0
    sum_of_prior_mult_ship = 0
    each_ship_prior_mult_ship = []
    for ships in team1:
        toadd = ships[1] * list_of_priorities[i]
        sum_of_prior_mult_ship += toadd
        each_ship_prior_mult_ship.append(toadd)
        i += 1
    for elem in each_ship_prior_mult_ship:
        list_of_pri_percent.append(_my_round_threshhold_up(elem / sum_of_prior_mult_ship, 7, 0.5))
    text = "list_of_priorities_percent %s" % (list_of_pri_percent)
    _log(text)
    print(text)
    
    list_of_rocket_per_ship_type = []
    
    sum_of_rockets = 0
    for j in range(0, len(team1) - 1):
        rockets = int(_my_round_threshhold_up(all_rockets * list_of_pri_percent[j], 0, threshhold))
        list_of_rocket_per_ship_type.append(rockets)
        sum_of_rockets += rockets
    check_left_rockets = all_rockets - sum_of_rockets
    if check_left_rockets < 0:
        list_of_rocket_per_ship_type.append(0)
    else:
        list_of_rocket_per_ship_type.append(check_left_rockets)
    text = "list_of_rocket_per_ship_type:\n%s" % (list_of_rocket_per_ship_type)
    _log(text)
    print(text)
    
    list_of_list_dam_per_ship = []
    for i in range(len(list_of_rocket_per_ship_type)):
        list_of_list_dam_per_ship.append([])
        list_of_list_dam_per_ship[i].append([0, 0])
        list_of_list_dam_per_ship[i].append([1, 0])
        list_of_list_dam_per_ship[i].append([2, 0])
        list_of_list_dam_per_ship[i].append([3, list_of_rocket_per_ship_type[i] * default_missiles_list[r_id][2]])
        list_of_list_dam_per_ship[i].append([4, 0])
    text = "list_of_damage_per_ship_type:"
    _log(text)
    print(text)
    for elem in list_of_list_dam_per_ship:
        text = str(elem)
        _log(text)
        print(text)
    text = "\n\n"
    _log(text)
    print(text)
    
    for j in range(0, len(team1)):
        text = "Battle Rocket Logic Iteration № %s" % (j)
        _log(text)
        print(text)
        start_ships = team1[j][1]
        i = team1[j][0]
        def_defenses = [[k, listofships[i][k + 10]] for k in range(5)]
        text = "defense_type_mod %s" % (defense_type_mod)
        _log(text)
        print(text)
        text = "dam_per_ship element %s" % (list_of_list_dam_per_ship[j])
        _log(text)
        print(text)
        text = "def_defenses %s" % (def_defenses)
        _log(text)
        print(text)
        list_of_list_dam_per_ship[j], ships_left = _deal_damage_and_return_stuff(list_of_list_dam_per_ship[j], def_defenses, mod1[1], defense_type_mod, team1[j][1], i, threshhold)
        text = "Damage left %s" % (list_of_list_dam_per_ship[j])
        _log(text)
        print(text)
        text = "Ships left %s" % (ships_left)
        _log(text)
        print(text)
        if ships_left > 0:
            text = "ships alive and no damage left"
            _log(text)
            print(text)
            team1[j] = [i, ships_left]
        else:
            text = "All (%s) ships id %s destroyed" % (start_ships, listofships[i][0])
            _log(text)
            print(text)
            text = "Damage left %s" % (list_of_list_dam_per_ship[j])
            _log(text)
            print(text)
            team1[j] = [i, 0]
        text = "ships left %s" % (team1)
        _log(text)
        print(text)
    
    text = "lists of leftover damage %s" % (list_of_list_dam_per_ship)
    _log(text)
    print(text)
    
    summ = 0
    for h in range(len(list_of_list_dam_per_ship)):
        temp = _my_round_down(list_of_list_dam_per_ship[h][3][1] / default_missiles_list[r_id][2])
        summ += temp
    if summ != 0:
        flag_damage = True
    all_rockets = summ
    text = "sum of leftover missileheads %s" % (all_rockets)
    _log(text)
    print(text)
    
    
    for ships in team1:
        if ships[1] != 0:
            flag_ships = True
            break
    
    if flag_ships:
        if flag_damage:
            do_again = True
        else:
            do_again = False
    
    if do_again:
        new = []
        for ships in team1:
            new.append(ships)
        team1.clear()
        for ships in new:
            if ships[1] != 0:
                team1.append(ships)
    
    if do_again:
        text = "\n\n%s %s missileheads left, ships left: %s. Do battle logic again\n\n" % (all_rockets, default_missiles_list[r_id][0], team1)
        _log(text)
        print(text)
        team1, all_rockets = _battle_logic_rockets_damage(team1, all_rockets, r_id, mod1, defense_type_mod, state_att_def, threshhold)
    
    return team1, all_rockets
    
def _simulate_rocket_damage(team1, all_rockets, r_id, module1, att_def_1, defense_type_mod_1, threshhold):
    text = "Simulate Rocket mod is %s" % (module1)
    _log(text)
    print(text)
    mod1 = [1.0, module1[1]]
    text = "Defense mod against specific damage type:\n%s" %(defense_type_mod_1)
    _log(text)
    print(text)
    team1_comp = _team_into_id_ship(team1)
    start_rockets = all_rockets
    
    # battle logic turrets vs team1
    team1_ships_left, all_rockets = _battle_logic_rockets_damage(team1_comp, all_rockets, r_id, mod1, defense_type_mod_1, att_def_1, threshhold)
    
    team1_ships_left = _expand_list(team1_ships_left)
    team1_ships_dead = _subtract_in_list(team1, team1_ships_left)
    
    for i in range(len(team1_ships_left)):
        team1_ships_dead[i] = int(_my_round_threshhold_up(team1_ships_dead[i], 0, threshhold))
    
    team1_ships_left = _subtract_in_list(team1, team1_ships_dead)
    
    #team1_comp = _team_into_id_ship(team1)

    team1_cost = _calc_energy_cost(team1_comp)
    for_cost_1 = _team_into_id_ship(team1_ships_dead)
    team1_cost_dead = _calc_energy_cost(for_cost_1)
    all_rockets = int(all_rockets / default_missiles_list[r_id][1])

    text = "\n\n%s\n\n%s %s Rockets vs Team:\nStarting\n%s\nEnergy cost\n%s\nDestroyed\n%s\nEnergy cost\n%s + %s = %s\nAlive\n%s\nRockets left\n%s\n\n" % (mod1, start_rockets, default_missiles_list[r_id][0], team1, team1_cost, team1_ships_dead, team1_cost_dead, _my_round_threshhold_up(team1_cost * 0.02, 0, 0.5), _my_round_threshhold_up(team1_cost_dead + team1_cost * 0.02, 0, 0.5), team1_ships_left, all_rockets)
    _log(text)
    print(text)
    return [team1_ships_dead, team1_cost_dead, team1_ships_left, team1_cost, all_rockets, _calc_build_time(team1_ships_dead), _calc_build_time(team1)]

def _dead_ships_from_turrets(s_id, mod, defense_type_mod, all_rockets, turret_sum_damage, on_blockade, do_passive, threshhold):
    if on_blockade:
        dead_from_rockets_sticks = int(_my_round_threshhold_up(all_rockets[0] * default_missiles_list[0][1] * default_missiles_list[0][2] / (listofships[s_id][13] * mod[1] * defense_type_mod[3]), 0, threshhold))
        dead_from_rockets_avrora = int(_my_round_threshhold_up(all_rockets[2] * default_missiles_list[2][1] * default_missiles_list[2][2] / (listofships[s_id][13] * mod[1] * defense_type_mod[3]), 0, threshhold))
        return dead_from_rockets_sticks + dead_from_rockets_avrora
    else:
        if all_rockets[1] == 0 and all_rockets[2] == 0:
            dead_from_turrets = int(_my_round_threshhold_up(turret_sum_damage / (listofships[s_id][14] * mod[1] * defense_type_mod[4]), 0, threshhold))
            return dead_from_turrets
        else:
            if do_passive:
                dead_from_turrets = int(_my_round_threshhold_up(turret_sum_damage / (listofships[s_id][14] * mod[1] * defense_type_mod[4]), 0, threshhold))
            else:
                dead_from_turrets = 0
            dead_from_rockets_cobra = int(_my_round_threshhold_up(all_rockets[1] * default_missiles_list[1][1] * default_missiles_list[1][2] / (listofships[s_id][13] * mod[1] * defense_type_mod[3]), 0, threshhold))
            dead_from_rockets_avrora = int(_my_round_threshhold_up(all_rockets[2] * default_missiles_list[2][1] * default_missiles_list[2][2] / (listofships[s_id][13] * mod[1] * defense_type_mod[3]), 0, threshhold))
            return dead_from_rockets_cobra + dead_from_rockets_avrora + dead_from_turrets


#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------
#             Запуск программы
#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------

if __name__ == "__main__":
    # logging header
    _log(str(datetime.datetime.today()) + "\n")
    _main()